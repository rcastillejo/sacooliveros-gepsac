--------------------------------------------------------
-- Archivo creado  - jueves-diciembre-26-2013   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence SEQ_APLICACION
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_APLICACION"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 381 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ATRIBUTO_AP
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_ATRIBUTO_AP"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_AUDITORIA
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_AUDITORIA"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_EMPRESA
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_EMPRESA"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 429 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_HORARIO
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_HORARIO"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_HORARIODETALLE
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_HORARIODETALLE"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LLAVE
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_LLAVE"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PERMISO
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_PERMISO"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1041 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_POLITICA_AP
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_POLITICA_AP"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ROL
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_ROL"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_TEMPLATE
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_TEMPLATE"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_USUARIO
--------------------------------------------------------

   CREATE SEQUENCE  "SCAPCIDE"."SEQ_USUARIO"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 301 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table TP_APLICACION
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_APLICACION" 
   (	"ID_EMPRESA" NUMBER(19,0), 
	"ID_APLICACION" NUMBER(19,0), 
	"MNEMONICO" VARCHAR2(200 CHAR), 
	"NOMBRE" VARCHAR2(200 CHAR), 
	"ESTADO" VARCHAR2(255 CHAR), 
	"DESCRIPCION" VARCHAR2(255 BYTE), 
	"POLITICA_ACTIVA" CHAR(1 BYTE), 
	"AUD_FEC_CREAC" TIMESTAMP (6), 
	"AUD_FEC_MODIF" TIMESTAMP (6), 
	"AUD_USU_CREAC" VARCHAR2(255 CHAR), 
	"AUD_USU_MODIF" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_ATRIBUTO
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_ATRIBUTO" 
   (	"ID_POLITICA" VARCHAR2(255 CHAR), 
	"ID_ATRIBUTO" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_AUDITORIA
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_AUDITORIA" 
   (	"ID_AUDITORIA" NUMBER(19,0), 
	"CLASE" VARCHAR2(255 CHAR), 
	"FECHA" TIMESTAMP (6), 
	"IP" VARCHAR2(255 CHAR), 
	"MENU" VARCHAR2(255 CHAR), 
	"METODO" VARCHAR2(255 CHAR), 
	"MODULO" VARCHAR2(255 CHAR), 
	"USUARIO" VARCHAR2(255 CHAR), 
	"EMPRESA" VARCHAR2(255 CHAR), 
	"VALORES_ANTIGUOS" VARCHAR2(4000 CHAR), 
	"VALORES_NUEVOS" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_BLOQUEO
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_BLOQUEO" 
   (	"USUARIO" VARCHAR2(255 CHAR), 
	"MNEMONICO_EMPRESA" VARCHAR2(255 CHAR), 
	"FECHA_ACTUALIZACION" TIMESTAMP (6), 
	"ESTADO" VARCHAR2(255 CHAR), 
	"INTENTOS_FALLIDOS" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_CLAVE_ANTIGUA
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_CLAVE_ANTIGUA" 
   (	"USUARIO" VARCHAR2(255 BYTE), 
	"MNEMONICO_EMPRESA" VARCHAR2(255 BYTE), 
	"OLD_PASSWORDS" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_EMPRESA
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_EMPRESA" 
   (	"ID_EMPRESA" NUMBER(19,0), 
	"MNEMONICO" VARCHAR2(200 CHAR), 
	"NOMBRE" VARCHAR2(200 CHAR), 
	"ESTADO" VARCHAR2(255 CHAR), 
	"DESCRIPCION" VARCHAR2(250 BYTE), 
	"AUD_FEC_CREAC" TIMESTAMP (6), 
	"AUD_FEC_MODIF" TIMESTAMP (6), 
	"AUD_USU_CREAC" VARCHAR2(255 CHAR), 
	"AUD_USU_MODIF" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_HORARIO
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_HORARIO" 
   (	"ID_APLICACION" NUMBER(19,0), 
	"ID_HORARIO" NUMBER(19,0), 
	"ID_EMPRESA" NUMBER(19,0), 
	"ID_USUARIO" NUMBER(19,0), 
	"TIPO" VARCHAR2(255 CHAR), 
	"MNEMONICO" VARCHAR2(200 CHAR), 
	"NOMBRE" VARCHAR2(200 CHAR), 
	"MAC" VARCHAR2(255 CHAR), 
	"AUD_FEC_CREAC" TIMESTAMP (6), 
	"AUD_FEC_MODIF" TIMESTAMP (6), 
	"AUD_USU_CREAC" VARCHAR2(255 CHAR), 
	"AUD_USU_MODIF" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_LLAVE
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_LLAVE" 
   (	"ID_LLAVE" NUMBER(19,0), 
	"NOMBRE" VARCHAR2(200 CHAR), 
	"VALOR_ANTERIOR" VARCHAR2(200 CHAR), 
	"VALOR_NUEVO" VARCHAR2(200 CHAR), 
	"TIPO_LLAVE" VARCHAR2(255 CHAR), 
	"TIPO_GENERACION" VARCHAR2(255 CHAR), 
	"ESTADO" VARCHAR2(255 CHAR), 
	"AUD_FEC_CREAC" TIMESTAMP (6), 
	"AUD_FEC_MODIF" TIMESTAMP (6), 
	"AUD_USU_CREAC" VARCHAR2(255 CHAR), 
	"AUD_USU_MODIF" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

   COMMENT ON COLUMN "SCAPCIDE"."TP_LLAVE"."VALOR_ANTERIOR" IS 'Valor referencial, útil para traslado y update.';
   COMMENT ON COLUMN "SCAPCIDE"."TP_LLAVE"."VALOR_NUEVO" IS 'Valor que se visualiza.';
   COMMENT ON COLUMN "SCAPCIDE"."TP_LLAVE"."TIPO_LLAVE" IS 'Tipo de llave: DEK (Cifrado) ó TAC (Mac).';
   COMMENT ON COLUMN "SCAPCIDE"."TP_LLAVE"."TIPO_GENERACION" IS 'Tipo de generación de la llave: HW/SW.';
--------------------------------------------------------
--  DDL for Table TP_PERMISO
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_PERMISO" 
   (	"ID_APLICACION" NUMBER(19,0), 
	"ID_PERMISO" NUMBER(19,0), 
	"MNEMONICO" VARCHAR2(200 CHAR), 
	"NOMBRE" VARCHAR2(200 CHAR), 
	"ESTADO" VARCHAR2(255 CHAR), 
	"TIPO" VARCHAR2(255 CHAR), 
	"DESCRIPCION" VARCHAR2(20 BYTE), 
	"AUD_FEC_CREAC" TIMESTAMP (6), 
	"AUD_FEC_MODIF" TIMESTAMP (6), 
	"AUD_USU_CREAC" VARCHAR2(255 CHAR), 
	"AUD_USU_MODIF" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_POLITICA
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_POLITICA" 
   (	"ID_POLITICA" VARCHAR2(255 CHAR), 
	"EVENTO" VARCHAR2(255 CHAR), 
	"CODIGO" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_ROL
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_ROL" 
   (	"ID_APLICACION" NUMBER(19,0), 
	"ID_ROL" NUMBER(19,0), 
	"MNEMONICO" VARCHAR2(200 CHAR), 
	"NOMBRE" VARCHAR2(200 CHAR), 
	"ESTADO" VARCHAR2(255 CHAR), 
	"DESCRIPCION" VARCHAR2(255 BYTE), 
	"AUD_FEC_CREAC" TIMESTAMP (6), 
	"AUD_FEC_MODIF" TIMESTAMP (6), 
	"AUD_USU_CREAC" VARCHAR2(255 CHAR), 
	"AUD_USU_MODIF" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TP_TEMPLATE
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_TEMPLATE" 
   (	"ID_TEMPLATE" NUMBER(19,0), 
	"MNEMONICO" VARCHAR2(200 CHAR), 
	"NOMBRE" VARCHAR2(200 CHAR), 
	"ESTADO" VARCHAR2(255 CHAR), 
	"TIPO" VARCHAR2(255 CHAR), 
	"AUD_FEC_CREAC" TIMESTAMP (6), 
	"AUD_FEC_MODIF" TIMESTAMP (6), 
	"AUD_USU_CREAC" VARCHAR2(255 CHAR), 
	"AUD_USU_MODIF" VARCHAR2(255 CHAR), 
	"DESCRIPCION" CLOB, 
	"ID_EMPRESA" NUMBER(19,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("DESCRIPCION") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table TP_USUARIO
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TP_USUARIO" 
   (	"ID_EMPRESA" NUMBER(19,0), 
	"ID_USUARIO" NUMBER(19,0), 
	"USUARIO" VARCHAR2(255 CHAR), 
	"CONTRASENA" VARCHAR2(255 CHAR), 
	"APELLIDOMATERNO" VARCHAR2(255 CHAR), 
	"APELLIDOPATERNO" VARCHAR2(255 CHAR), 
	"NOMBRE" VARCHAR2(255 CHAR), 
	"CORREO" VARCHAR2(255 CHAR), 
	"ESTADO" VARCHAR2(255 CHAR), 
	"TIPODOCUMENTO" VARCHAR2(255 CHAR), 
	"NUMERODOCUMENTO" VARCHAR2(255 CHAR), 
	"TELEFONO" VARCHAR2(255 CHAR), 
	"FECHA_CAMBIO_CLAVE" TIMESTAMP (6), 
	"FECHA_LOGIN" TIMESTAMP (6), 
	"MAC" VARCHAR2(255 CHAR), 
	"AUD_FEC_CREAC" TIMESTAMP (6), 
	"AUD_FEC_MODIF" TIMESTAMP (6), 
	"AUD_USU_CREAC" VARCHAR2(255 CHAR), 
	"AUD_USU_MODIF" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TR_PERMISO_X_ROL
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TR_PERMISO_X_ROL" 
   (	"ID_ROL" NUMBER(19,0), 
	"ID_PERMISO" NUMBER(19,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TR_ROLES_X_ROL
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TR_ROLES_X_ROL" 
   (	"ID_ROL_PADRE" NUMBER(19,0), 
	"ID_ROL" NUMBER(19,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TR_ROL_X_USUARIO
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TR_ROL_X_USUARIO" 
   (	"ID_USUARIO" NUMBER(19,0), 
	"ID_ROL" NUMBER(19,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TS_ATRIBUTO_APLICACION
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TS_ATRIBUTO_APLICACION" 
   (	"ID_POLITICA" VARCHAR2(255 CHAR), 
	"ID_ATRIBUTO" VARCHAR2(255 CHAR), 
	"APLICACION" VARCHAR2(255 CHAR), 
	"VALOR" VARCHAR2(255 CHAR), 
	"ID_EMPRESA" NUMBER(19,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TS_ATRIBUTO_EMPRESA
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TS_ATRIBUTO_EMPRESA" 
   (	"ID_POLITICA" VARCHAR2(255 CHAR), 
	"ID_ATRIBUTO" VARCHAR2(255 CHAR), 
	"EMPRESA" VARCHAR2(255 CHAR), 
	"VALOR" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TS_HORARIO_DETALLE
--------------------------------------------------------

  CREATE TABLE "SCAPCIDE"."TS_HORARIO_DETALLE" 
   (	"ID_HORARIO" NUMBER(19,0), 
	"ID_DETALLE" NUMBER(19,0), 
	"DOMINGO" NUMBER(1,0), 
	"HORA_FIN" VARCHAR2(255 CHAR), 
	"HORA_INICIO" VARCHAR2(255 CHAR), 
	"JUEVES" NUMBER(1,0), 
	"LUNES" NUMBER(1,0), 
	"MARTES" NUMBER(1,0), 
	"MIERCOLES" NUMBER(1,0), 
	"POR_DIA" NUMBER(1,0), 
	"POR_HORA" NUMBER(1,0), 
	"SABADO" NUMBER(1,0), 
	"VIERNES" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into SCAPCIDE.TP_APLICACION
SET DEFINE OFF;
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (415,374,'nuevo','nuevo','HABILITADO',null,'0',to_timestamp('26/12/13 09:24:58.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (339,369,'nuevo','nuevo','HABILITADO',null,'0',to_timestamp('26/12/13 09:18:57.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (415,375,'seguridad','Sistema de Control de Accesos','HABILITADO',null,'0',to_timestamp('26/12/13 09:25:18.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (339,328,'seguridad','Sistema de Control de Accesos','HABILITADO',null,'0',to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (249,201,'marcoapp','marcoapp','HABILITADO','marcoapp','1',to_timestamp('01/12/13 14:15:57.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('11/12/13 00:50:38.000000000','DD/MM/RR HH24:MI:SS.FF'),'1','admin');
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (338,327,'seguridad','Sistema de Control de Accesos','HABILITADO',null,'0',to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,1,'seguridad','Sistema de Control de Accesos','HABILITADO','1','1',null,to_timestamp('30/11/13 22:54:45.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'1');
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (341,332,'marcoapp','marcoapp','HABILITADO',null,'0',to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (338,326,'marcoapp','marcoapp','HABILITADO',null,'0',to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_APLICACION (ID_EMPRESA,ID_APLICACION,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,POLITICA_ACTIVA,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (341,333,'seguridad','Sistema de Control de Accesos','HABILITADO',null,'0',to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
REM INSERTING into SCAPCIDE.TP_ATRIBUTO
SET DEFINE OFF;
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('oldPassword','BACKTRACE');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('passwordStrength','CRITERION');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('passwordExpired','DAYS');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('passwordExpiredNotified','DAY_NOTIFIED');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('unLockedAutomatic','HOUR');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('passwordLength','MAX_LENGTH');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('maxTimeOut','MAX_MINUTE');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('usuarioLength','MAX_USER_LENGTH');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('unLockedAutomatic','MINUTE');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('passwordLength','MIN_LENGTH');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('usuarioLength','MIN_USER_LENGTH');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('passwordExpired','MONTHS');
Insert into SCAPCIDE.TP_ATRIBUTO (ID_POLITICA,ID_ATRIBUTO) values ('passwordExpired','YEARS');
REM INSERTING into SCAPCIDE.TP_AUDITORIA
SET DEFINE OFF;
Insert into SCAPCIDE.TP_AUDITORIA (ID_AUDITORIA,CLASE,FECHA,IP,MENU,METODO,MODULO,USUARIO,EMPRESA,VALORES_ANTIGUOS,VALORES_NUEVOS) values (1,'clase',null,'ip','menu','metodo','modulo','usuario','empresa','a','a');
REM INSERTING into SCAPCIDE.TP_BLOQUEO
SET DEFINE OFF;
Insert into SCAPCIDE.TP_BLOQUEO (USUARIO,MNEMONICO_EMPRESA,FECHA_ACTUALIZACION,ESTADO,INTENTOS_FALLIDOS) values ('marco1','34',to_timestamp('20/12/13 10:44:58.000000000','DD/MM/RR HH24:MI:SS.FF'),'CREADO',0);
Insert into SCAPCIDE.TP_BLOQUEO (USUARIO,MNEMONICO_EMPRESA,FECHA_ACTUALIZACION,ESTADO,INTENTOS_FALLIDOS) values ('marco','Marcoapp',to_timestamp('12/12/13 15:40:32.000000000','DD/MM/RR HH24:MI:SS.FF'),'CREADO',0);
Insert into SCAPCIDE.TP_BLOQUEO (USUARIO,MNEMONICO_EMPRESA,FECHA_ACTUALIZACION,ESTADO,INTENTOS_FALLIDOS) values ('MARCO','novatronic',to_timestamp('16/12/13 00:57:55.000000000','DD/MM/RR HH24:MI:SS.FF'),'CREADO',0);
REM INSERTING into SCAPCIDE.TP_CLAVE_ANTIGUA
SET DEFINE OFF;
REM INSERTING into SCAPCIDE.TP_EMPRESA
SET DEFINE OFF;
Insert into SCAPCIDE.TP_EMPRESA (ID_EMPRESA,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (420,'marquito','marquito','HABILITADO',null,to_timestamp('26/12/13 09:36:05.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_EMPRESA (ID_EMPRESA,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (415,'123','123','HABILITADO',null,to_timestamp('26/12/13 09:24:49.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_EMPRESA (ID_EMPRESA,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (339,'12345','12345','HABILITADO',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_EMPRESA (ID_EMPRESA,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (210,'Marcoapp','Marcoapp','HABILITADO','Marcoapp1',to_timestamp('27/11/13 22:32:10.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('27/11/13 22:32:39.000000000','DD/MM/RR HH24:MI:SS.FF'),'1','1');
Insert into SCAPCIDE.TP_EMPRESA (ID_EMPRESA,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (249,'marcoapp','marcoapp','HABILITADO','marcoapp',to_timestamp('01/12/13 14:14:39.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'1',null);
Insert into SCAPCIDE.TP_EMPRESA (ID_EMPRESA,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (338,'xyz','xyz','HABILITADO',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_EMPRESA (ID_EMPRESA,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,'novatronic','Novatronic','HABILITADO','1',to_timestamp('02/02/12 22:11:40.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('30/11/13 22:54:34.000000000','DD/MM/RR HH24:MI:SS.FF'),'novatronic\system','1');
Insert into SCAPCIDE.TP_EMPRESA (ID_EMPRESA,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (341,'34','34','HABILITADO',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
REM INSERTING into SCAPCIDE.TP_HORARIO
SET DEFINE OFF;
Insert into SCAPCIDE.TP_HORARIO (ID_APLICACION,ID_HORARIO,ID_EMPRESA,ID_USUARIO,TIPO,MNEMONICO,NOMBRE,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (201,24,0,null,'APLICACION','marcoapp','marcoapp','DTc2KjR73+KseLWqFz8mbFTfNg0ldUpS9hPPm3EVz7E=',to_timestamp('10/12/13 23:47:14.000000000','DD/MM/RR HH24:MI:SS.FF'),null,null,null);
Insert into SCAPCIDE.TP_HORARIO (ID_APLICACION,ID_HORARIO,ID_EMPRESA,ID_USUARIO,TIPO,MNEMONICO,NOMBRE,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,41,1,null,'APLICACION','seguridad','Sistema de Control de Accesos','implementar',to_timestamp('24/12/13 20:40:00.000000000','DD/MM/RR HH24:MI:SS.FF'),null,null,null);
Insert into SCAPCIDE.TP_HORARIO (ID_APLICACION,ID_HORARIO,ID_EMPRESA,ID_USUARIO,TIPO,MNEMONICO,NOMBRE,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,42,1,221,'USUARIO','MARCO','MARCO','implementar',to_timestamp('24/12/13 20:46:03.000000000','DD/MM/RR HH24:MI:SS.FF'),null,null,null);
REM INSERTING into SCAPCIDE.TP_LLAVE
SET DEFINE OFF;
REM INSERTING into SCAPCIDE.TP_PERMISO
SET DEFINE OFF;
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1001,'boton.eliminarempresa','Boton Eliminar empresa','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:20.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1002,'boton.nuevaempresa','Boton nueva empresa','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:22.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1003,'export.aplicacion','Exportar opcion aplicacion','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:23.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1004,'export.empresa','Export opcion empresa','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:24.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1005,'import.aplicacion','Import opcion aplicacion','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:24.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1006,'import.empresa','Importar opcion empresa','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:25.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1007,'menu.aplicacion','Menu Aplicacion','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:26.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1008,'menu.bloqueo','Menu Bloqueo','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:27.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1009,'menu.desbloqueo','Menu Desbloqueo','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:27.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1010,'menu.empresa','Menu Empresa','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:28.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1011,'menu.horario','Menu Horario','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:28.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1012,'menu.permiso','Menu Permiso','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:29.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1013,'menu.politica','Menu Politicas','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:29.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1014,'menu.reporte','Menu Reporte','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:30.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1015,'menu.rol','Menu Rol','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:31.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1016,'menu.template','Menu Template','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:31.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1017,'menu.usuario','Menu Usuario','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:32.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1018,'submenu.exportar','Submenu Exportar','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:32.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1019,'submenu.gestionar','Submenu Gestionar Template','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:33.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,1020,'submenu.importar','Submenu Importar','HABILITADO','OPCION',null,to_timestamp('26/12/13 09:25:34.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,741,'boton.eliminarempresa','Boton Eliminar empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,742,'boton.nuevaempresa','Boton nueva empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,743,'export.aplicacion','Exportar opcion aplicacion','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,744,'export.empresa','Export opcion empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,745,'import.aplicacion','Import opcion aplicacion','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,746,'import.empresa','Importar opcion empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,747,'menu.aplicacion','Menu Aplicacion','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,748,'menu.bloqueo','Menu Bloqueo','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,749,'menu.desbloqueo','Menu Desbloqueo','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,750,'menu.empresa','Menu Empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,751,'menu.horario','Menu Horario','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,752,'menu.permiso','Menu Permiso','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,753,'menu.politica','Menu Politicas','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,754,'menu.reporte','Menu Reporte','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,755,'menu.rol','Menu Rol','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,756,'menu.template','Menu Template','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,757,'menu.usuario','Menu Usuario','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,758,'submenu.exportar','Submenu Exportar','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,759,'submenu.gestionar','Submenu Gestionar Template','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,760,'submenu.importar','Submenu Importar','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,881,'boton.eliminarempresa1','Boton Eliminar empresa','HABILITADO','OPCION','Boton',to_timestamp('24/12/13 19:41:03.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'1',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,20,'submenu.gestionar','Submenu Gestionar Template','HABILITADO','SUBMENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,1,'menu.aplicacion','Menu Aplicacion','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,2,'menu.usuario','Menu Usuario','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,3,'export.empresa','Export opcion empresa','HABILITADO','OPCION',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,4,'boton.nuevaempresa','Boton nueva empresa','HABILITADO','BOTON',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,721,'boton.eliminarempresa','Boton Eliminar empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,722,'boton.nuevaempresa','Boton nueva empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,723,'export.aplicacion','Exportar opcion aplicacion','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,724,'export.empresa','Export opcion empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,725,'import.aplicacion','Import opcion aplicacion','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,726,'import.empresa','Importar opcion empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,727,'menu.aplicacion','Menu Aplicacion','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,728,'menu.bloqueo','Menu Bloqueo','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,729,'menu.desbloqueo','Menu Desbloqueo','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,730,'menu.empresa','Menu Empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,731,'menu.horario','Menu Horario','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,732,'menu.permiso','Menu Permiso','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,733,'menu.politica','Menu Politicas','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,734,'menu.reporte','Menu Reporte','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,735,'menu.rol','Menu Rol','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,736,'menu.template','Menu Template','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,737,'menu.usuario','Menu Usuario','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,738,'submenu.exportar','Submenu Exportar','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,739,'submenu.gestionar','Submenu Gestionar Template','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,740,'submenu.importar','Submenu Importar','HABILITADO','OPCION',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,5,'submenu.exportar','Submenu Exportar','HABILITADO','SUBMENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,6,'menu.template','Menu Template','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,7,'import.empresa','Importar opcion empresa','HABILITADO','OPCION',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,8,'boton.eliminarempresa','Boton Eliminar empresa','HABILITADO','BOTON',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,9,'submenu.importar','Submenu Importar','HABILITADO','SUBMENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,10,'import.aplicacion','Import opcion aplicacion','HABILITADO','OPCION',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,11,'export.aplicacion','Exportar opcion aplicacion','HABILITADO','OPCION',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,12,'menu.horario','Menu Horario','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,13,'menu.empresa','Menu Empresa','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,14,'menu.permiso','Menu Permiso','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,15,'menu.politica','Menu Politicas','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,16,'menu.reporte','Menu Reporte','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,17,'menu.rol','Menu Rol','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,18,'menu.bloqueo','Menu Bloqueo','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,19,'menu.desbloqueo','Menu Desbloqueo','HABILITADO','MENU',null,null,null,null,null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,781,'boton.eliminarempresa','Boton Eliminar empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,782,'boton.nuevaempresa','Boton nueva empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,783,'export.aplicacion','Exportar opcion aplicacion','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,784,'export.empresa','Export opcion empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,785,'import.aplicacion','Import opcion aplicacion','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,786,'import.empresa','Importar opcion empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,787,'menu.aplicacion','Menu Aplicacion','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,788,'menu.bloqueo','Menu Bloqueo','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,789,'menu.desbloqueo','Menu Desbloqueo','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,790,'menu.empresa','Menu Empresa','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,791,'menu.horario','Menu Horario','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,792,'menu.permiso','Menu Permiso','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,793,'menu.politica','Menu Politicas','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,794,'menu.reporte','Menu Reporte','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,795,'menu.rol','Menu Rol','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,796,'menu.template','Menu Template','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,797,'menu.usuario','Menu Usuario','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,798,'submenu.exportar','Submenu Exportar','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,799,'submenu.gestionar','Submenu Gestionar Template','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_PERMISO (ID_APLICACION,ID_PERMISO,MNEMONICO,NOMBRE,ESTADO,TIPO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,800,'submenu.importar','Submenu Importar','HABILITADO','OPCION',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
REM INSERTING into SCAPCIDE.TP_POLITICA
SET DEFINE OFF;
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('unLockedAutomatic','login','1000');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('userLocked','login','1005');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('maxFailedLoginAttempts','login','1004');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('passwordExpired','login','1006');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('passwordChangeFirst','login','1001');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('passwordExpiredNotified','login','1002');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('passwordLength','create-change','1008');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('passwordStrength','create-change','1007');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('oldPassword','create-change','1009');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('usuarioLength','user-create-change','1010');
Insert into SCAPCIDE.TP_POLITICA (ID_POLITICA,EVENTO,CODIGO) values ('maxTimeOut','read','1011');
REM INSERTING into SCAPCIDE.TP_ROL
SET DEFINE OFF;
Insert into SCAPCIDE.TP_ROL (ID_APLICACION,ID_ROL,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (375,206,'administrador','administrador','HABILITADO',null,to_timestamp('26/12/13 09:25:35.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_ROL (ID_APLICACION,ID_ROL,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (328,151,'administrador','administrador','HABILITADO',null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_ROL (ID_APLICACION,ID_ROL,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (201,107,'administrador','administrador','HABILITADO','adms',to_timestamp('11/12/13 10:56:16.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_ROL (ID_APLICACION,ID_ROL,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,1,'administrador','administrador','HABILITADO',null,to_timestamp('11/12/12 16:36:10.766000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('15/12/12 19:33:32.449000000','DD/MM/RR HH24:MI:SS.FF'),'system/novatronic','system/novatronic');
Insert into SCAPCIDE.TP_ROL (ID_APLICACION,ID_ROL,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (333,155,'administrador','administrador','HABILITADO',null,to_timestamp('16/12/13 02:44:46.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_ROL (ID_APLICACION,ID_ROL,MNEMONICO,NOMBRE,ESTADO,DESCRIPCION,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (327,149,'administrador','administrador','HABILITADO',null,to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
REM INSERTING into SCAPCIDE.TP_TEMPLATE
SET DEFINE OFF;
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (101,'marcoapp','dsds','HABILITADO','APLICACION',to_timestamp('26/12/13 08:20:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null,249);
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (103,'marcoapp','templatrrep','HABILITADO','APLICACION',to_timestamp('26/12/13 08:24:05.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null,338);
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (104,'dsd','ds','HABILITADO','APLICACION',to_timestamp('26/12/13 08:49:24.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null,210);
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (105,'nuevo','nuevo','HABILITADO','APLICACION',to_timestamp('26/12/13 09:18:57.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null,339);
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (111,'marquito','marquito','HABILITADO','EMPRESA',to_timestamp('26/12/13 09:36:05.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null,null);
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (81,null,'sd','HABILITADO','EMPRESA',to_timestamp('15/12/13 23:08:21.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null,null);
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (21,'novatronic','novatronic','HABILITADO','EMPRESA',null,null,null,null,null);
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (93,'xyz','xyz','HABILITADO','EMPRESA',to_timestamp('16/12/13 01:51:44.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null,null);
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (97,'12345','dsd','HABILITADO','EMPRESA',to_timestamp('16/12/13 04:24:04.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null,null);
Insert into SCAPCIDE.TP_TEMPLATE (ID_TEMPLATE,MNEMONICO,NOMBRE,ESTADO,TIPO,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF,ID_EMPRESA) values (98,'seguridad','dsds2d','HABILITADO','APLICACION',to_timestamp('16/12/13 04:28:05.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null,null);
REM INSERTING into SCAPCIDE.TP_USUARIO
SET DEFINE OFF;
Insert into SCAPCIDE.TP_USUARIO (ID_EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,APELLIDOMATERNO,APELLIDOPATERNO,NOMBRE,CORREO,ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,FECHA_CAMBIO_CLAVE,FECHA_LOGIN,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (415,284,'MARC123456','12345',null,null,'MARCO',null,'HABILITADO',null,null,null,to_timestamp('26/12/13 09:25:45.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('26/12/13 09:25:45.000000000','DD/MM/RR HH24:MI:SS.FF'),'@@@@',to_timestamp('26/12/13 09:25:45.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_USUARIO (ID_EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,APELLIDOMATERNO,APELLIDOPATERNO,NOMBRE,CORREO,ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,FECHA_CAMBIO_CLAVE,FECHA_LOGIN,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (415,285,'MARC12345','12345',null,null,'MARCO',null,'HABILITADO',null,null,null,to_timestamp('26/12/13 09:25:54.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('26/12/13 09:25:54.000000000','DD/MM/RR HH24:MI:SS.FF'),'@@@@',to_timestamp('26/12/13 09:25:54.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_USUARIO (ID_EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,APELLIDOMATERNO,APELLIDOPATERNO,NOMBRE,CORREO,ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,FECHA_CAMBIO_CLAVE,FECHA_LOGIN,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (339,232,'MARC123','12345',null,null,'MARCO',null,'HABILITADO',null,null,null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),'@@@@',to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_USUARIO (ID_EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,APELLIDOMATERNO,APELLIDOPATERNO,NOMBRE,CORREO,ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,FECHA_CAMBIO_CLAVE,FECHA_LOGIN,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (339,233,'MARC1234','12345',null,null,'MARCO',null,'HABILITADO',null,null,null,to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),'@@@@',to_timestamp('16/12/13 02:40:08.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_USUARIO (ID_EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,APELLIDOMATERNO,APELLIDOPATERNO,NOMBRE,CORREO,ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,FECHA_CAMBIO_CLAVE,FECHA_LOGIN,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (341,241,'marco1','qmwtbkwn',null,'Marco','Marco','marco.martinezl@pucp.edu.pe','CREADO','DNI','323','232',to_timestamp('20/12/13 10:44:58.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('20/12/13 10:44:58.000000000','DD/MM/RR HH24:MI:SS.FF'),'implementar',to_timestamp('20/12/13 10:44:58.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
Insert into SCAPCIDE.TP_USUARIO (ID_EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,APELLIDOMATERNO,APELLIDOPATERNO,NOMBRE,CORREO,ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,FECHA_CAMBIO_CLAVE,FECHA_LOGIN,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (210,201,'marco','xvioDWmH72anCKS61cSzzqz8MbuDWvWXYvlRHPDE3ks=',null,'marco','marco','msalvatierra@novatronic.com','RESETEADO','DNI','123','234',to_timestamp('12/12/13 15:40:32.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('12/12/13 15:40:32.000000000','DD/MM/RR HH24:MI:SS.FF'),'dt1dIe84p+c6iRCWahKa3xc9HZVxildglQD/ozezLvo=',to_timestamp('12/12/13 15:40:32.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('19/12/13 00:02:53.000000000','DD/MM/RR HH24:MI:SS.FF'),'admin','admin');
Insert into SCAPCIDE.TP_USUARIO (ID_EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,APELLIDOMATERNO,APELLIDOPATERNO,NOMBRE,CORREO,ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,FECHA_CAMBIO_CLAVE,FECHA_LOGIN,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (-1,1,'admin','123456','Sistemas','Novatronic','Super Administrador','sistemas@novatronic.com,com','HABILITADO','DNI','123456789','4353453',to_timestamp('20/12/13 23:54:25.994000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('26/12/12 14:47:39.619000000','DD/MM/RR HH24:MI:SS.FF'),'1234',to_timestamp('02/02/12 22:11:40.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('26/12/13 14:47:39.635000000','DD/MM/RR HH24:MI:SS.FF'),'novatronic\system','system/novatronic');
Insert into SCAPCIDE.TP_USUARIO (ID_EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,APELLIDOMATERNO,APELLIDOPATERNO,NOMBRE,CORREO,ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,FECHA_CAMBIO_CLAVE,FECHA_LOGIN,MAC,AUD_FEC_CREAC,AUD_FEC_MODIF,AUD_USU_CREAC,AUD_USU_MODIF) values (1,221,'MARCO','3DACU+gPjkB66KpskekmcCvtK3vlm2Dj8Dt1Ho8aI+k=',null,'MARTINEZ','MARCO','martinezl.marco@gmail.com','CREADO','DNI','233434','233234',to_timestamp('16/12/13 00:57:55.000000000','DD/MM/RR HH24:MI:SS.FF'),to_timestamp('16/12/13 00:57:55.000000000','DD/MM/RR HH24:MI:SS.FF'),'IG4zHUTh4wNQz3jciOv1zLMKP9VKJEQhRiEB2ziyZTo=',to_timestamp('16/12/13 00:57:55.000000000','DD/MM/RR HH24:MI:SS.FF'),null,'admin',null);
REM INSERTING into SCAPCIDE.TR_PERMISO_X_ROL
SET DEFINE OFF;
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,1);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,2);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,3);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,4);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,5);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,6);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,7);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,8);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,9);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,10);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,11);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,12);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,13);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,14);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,15);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,16);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,17);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,18);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,19);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (1,20);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,1);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,2);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,3);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,4);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,5);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,6);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,7);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,9);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,10);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,11);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,12);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,13);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,14);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,15);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,16);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,17);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,18);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,19);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (82,20);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,1);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,2);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,3);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,4);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,5);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,6);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,7);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,8);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,9);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,10);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,11);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,12);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,13);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,14);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,15);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,16);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,17);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,18);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,19);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (0,20);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,799);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,787);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,797);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,784);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,782);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,798);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,796);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,786);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,781);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,800);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,785);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,783);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,791);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,790);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,792);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,793);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,794);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,795);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,788);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (155,789);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,799);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,787);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,797);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,784);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,782);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,798);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,796);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,786);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,800);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,785);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,783);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,791);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,790);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,792);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,793);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,794);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,795);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,788);
Insert into SCAPCIDE.TR_PERMISO_X_ROL (ID_ROL,ID_PERMISO) values (156,789);
REM INSERTING into SCAPCIDE.TR_ROLES_X_ROL
SET DEFINE OFF;
REM INSERTING into SCAPCIDE.TR_ROL_X_USUARIO
SET DEFINE OFF;
Insert into SCAPCIDE.TR_ROL_X_USUARIO (ID_USUARIO,ID_ROL) values (284,206);
Insert into SCAPCIDE.TR_ROL_X_USUARIO (ID_USUARIO,ID_ROL) values (285,206);
Insert into SCAPCIDE.TR_ROL_X_USUARIO (ID_USUARIO,ID_ROL) values (232,151);
Insert into SCAPCIDE.TR_ROL_X_USUARIO (ID_USUARIO,ID_ROL) values (233,151);
Insert into SCAPCIDE.TR_ROL_X_USUARIO (ID_USUARIO,ID_ROL) values (1,1);
Insert into SCAPCIDE.TR_ROL_X_USUARIO (ID_USUARIO,ID_ROL) values (221,1);
REM INSERTING into SCAPCIDE.TS_ATRIBUTO_APLICACION
SET DEFINE OFF;
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','HOUR','seguridad','1',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','MINUTE','seguridad','2',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MIN_LENGTH','seguridad','3',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MAX_LENGTH','seguridad','12',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','seguridad','55',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','YEARS','seguridad','3',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','MONTHS','seguridad','10',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','DAYS','seguridad','1',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordStrength','CRITERION','seguridad','123',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('oldPassword','BACKTRACE','seguridad','55',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpiredNotified','DAY_NOTIFIED','seguridad','55',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('timeOut','MAX_MINUTE','seguridad','55',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MAX_USER_LENGTH','seguridad','12',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MIN_USER_LENGTH','seguridad','6',1);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','HOUR','nuevo','1',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','MINUTE','nuevo','2',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MIN_LENGTH','nuevo','3',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MAX_LENGTH','nuevo','12',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','nuevo','88',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','YEARS','nuevo','3',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','MONTHS','nuevo','10',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','DAYS','nuevo','1',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordStrength','CRITERION','nuevo','123',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('oldPassword','BACKTRACE','nuevo','88',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpiredNotified','DAY_NOTIFIED','nuevo','12',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('timeOut','MAX_MINUTE','nuevo','88',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MAX_USER_LENGTH','nuevo','12',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MIN_USER_LENGTH','nuevo','6',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','HOUR','seguridad','1',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','MINUTE','seguridad','2',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MIN_LENGTH','seguridad','3',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MAX_LENGTH','seguridad','12',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','seguridad','88',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','YEARS','seguridad','3',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','MONTHS','seguridad','10',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','DAYS','seguridad','1',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordStrength','CRITERION','seguridad','123',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('oldPassword','BACKTRACE','seguridad','88',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpiredNotified','DAY_NOTIFIED','seguridad','12',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('timeOut','MAX_MINUTE','seguridad','88',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MAX_USER_LENGTH','seguridad','12',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MIN_USER_LENGTH','seguridad','6',415);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','HOUR','seguridad','1',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','MINUTE','seguridad','2',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MIN_LENGTH','seguridad','3',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MAX_LENGTH','seguridad','12',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','seguridad','77',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','YEARS','seguridad','3',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','MONTHS','seguridad','10',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','DAYS','seguridad','1',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordStrength','CRITERION','seguridad','123',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('oldPassword','BACKTRACE','seguridad','12',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpiredNotified','DAY_NOTIFIED','seguridad','12',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('timeOut','MAX_MINUTE','seguridad','12',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MAX_USER_LENGTH','seguridad','6',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MIN_USER_LENGTH','seguridad','12',339);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','HOUR','RE','1',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','MINUTE','RE','2',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MIN_LENGTH','RE','3',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MAX_LENGTH','RE','12',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','RE','77',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','YEARS','RE','3',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','MONTHS','RE','10',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','DAYS','RE','1',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordStrength','CRITERION','RE','123',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('oldPassword','BACKTRACE','RE','12',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpiredNotified','DAY_NOTIFIED','RE','12',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('timeOut','MAX_MINUTE','RE','12',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MAX_USER_LENGTH','RE','12',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MIN_USER_LENGTH','RE','6',210);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','HOUR','seguridad','1',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','MINUTE','seguridad','2',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MIN_LENGTH','seguridad','3',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MAX_LENGTH','seguridad','12',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','seguridad','99',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','YEARS','seguridad','3',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','MONTHS','seguridad','10',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','DAYS','seguridad','1',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordStrength','CRITERION','seguridad','123',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('oldPassword','BACKTRACE','seguridad','99',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpiredNotified','DAY_NOTIFIED','seguridad','99',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('timeOut','MAX_MINUTE','seguridad','99',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MAX_USER_LENGTH','seguridad','12',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MIN_USER_LENGTH','seguridad','6',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','HOUR','marcoapp','1',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','MINUTE','marcoapp','2',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MIN_LENGTH','marcoapp','3',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MAX_LENGTH','marcoapp','12',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','marcoapp','77',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','YEARS','marcoapp','3',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','MONTHS','marcoapp','10',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','DAYS','marcoapp','1',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordStrength','CRITERION','marcoapp','123',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('oldPassword','BACKTRACE','marcoapp','12',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpiredNotified','DAY_NOTIFIED','marcoapp','12',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('timeOut','MAX_MINUTE','marcoapp','12',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MAX_USER_LENGTH','marcoapp','6',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MIN_USER_LENGTH','marcoapp','12',341);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','HOUR','marcoapp','1',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('unLockedAutomatic','MINUTE','marcoapp','2',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MIN_LENGTH','marcoapp','3',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordLength','MAX_LENGTH','marcoapp','12',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','marcoapp','77',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','YEARS','marcoapp','3',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','MONTHS','marcoapp','10',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpired','DAYS','marcoapp','1',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordStrength','CRITERION','marcoapp','123',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('oldPassword','BACKTRACE','marcoapp','12',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('passwordExpiredNotified','DAY_NOTIFIED','marcoapp','12',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('timeOut','MAX_MINUTE','marcoapp','12',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MAX_USER_LENGTH','marcoapp','6',338);
Insert into SCAPCIDE.TS_ATRIBUTO_APLICACION (ID_POLITICA,ID_ATRIBUTO,APLICACION,VALOR,ID_EMPRESA) values ('usuarioLength','MIN_USER_LENGTH','marcoapp','12',338);
REM INSERTING into SCAPCIDE.TS_ATRIBUTO_EMPRESA
SET DEFINE OFF;
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('unLockedAutomatic','HOUR','123','1');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('unLockedAutomatic','MINUTE','123','2');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordLength','MIN_LENGTH','123','3');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordLength','MAX_LENGTH','123','12');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','123','88');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpired','YEARS','123','3');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpired','MONTHS','123','10');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpired','DAYS','123','1');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordStrength','CRITERION','123','123');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('oldPassword','BACKTRACE','123','88');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpiredNotified','DAY_NOTIFIED','123','12');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('timeOut','MAX_MINUTE','123','88');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('usuarioLength','MAX_USER_LENGTH','123','12');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('usuarioLength','MIN_USER_LENGTH','123','6');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('unLockedAutomatic','HOUR','marquito','1');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('unLockedAutomatic','MINUTE','marquito','2');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordLength','MIN_LENGTH','marquito','3');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordLength','MAX_LENGTH','marquito','12');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','marquito','88');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpired','YEARS','marquito','3');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpired','MONTHS','marquito','10');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpired','DAYS','marquito','1');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordStrength','CRITERION','marquito','123');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('oldPassword','BACKTRACE','marquito','88');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpiredNotified','DAY_NOTIFIED','marquito','12');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('timeOut','MAX_MINUTE','marquito','88');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('usuarioLength','MAX_USER_LENGTH','marquito','12');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('usuarioLength','MIN_USER_LENGTH','marquito','6');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('unLockedAutomatic','HOUR','novatronic','1');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('unLockedAutomatic','MINUTE','novatronic','2');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordLength','MIN_LENGTH','novatronic','3');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordLength','MAX_LENGTH','novatronic','12');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('maxFailedLoginAttempts','MAX_FAILED_ATTEMPTS','novatronic','88');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpired','YEARS','novatronic','3');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpired','MONTHS','novatronic','10');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpired','DAYS','novatronic','1');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordStrength','CRITERION','novatronic','123');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('oldPassword','BACKTRACE','novatronic','88');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('passwordExpiredNotified','DAY_NOTIFIED','novatronic','12');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('timeOut','MAX_MINUTE','novatronic','88');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('usuarioLength','MAX_USER_LENGTH','novatronic','12');
Insert into SCAPCIDE.TS_ATRIBUTO_EMPRESA (ID_POLITICA,ID_ATRIBUTO,EMPRESA,VALOR) values ('usuarioLength','MIN_USER_LENGTH','novatronic','6');
REM INSERTING into SCAPCIDE.TS_HORARIO_DETALLE
SET DEFINE OFF;
Insert into SCAPCIDE.TS_HORARIO_DETALLE (ID_HORARIO,ID_DETALLE,DOMINGO,HORA_FIN,HORA_INICIO,JUEVES,LUNES,MARTES,MIERCOLES,POR_DIA,POR_HORA,SABADO,VIERNES) values (24,24,0,'2','0',0,1,0,0,1,1,0,0);
Insert into SCAPCIDE.TS_HORARIO_DETALLE (ID_HORARIO,ID_DETALLE,DOMINGO,HORA_FIN,HORA_INICIO,JUEVES,LUNES,MARTES,MIERCOLES,POR_DIA,POR_HORA,SABADO,VIERNES) values (41,41,1,'23','0',1,1,1,1,0,0,1,1);
Insert into SCAPCIDE.TS_HORARIO_DETALLE (ID_HORARIO,ID_DETALLE,DOMINGO,HORA_FIN,HORA_INICIO,JUEVES,LUNES,MARTES,MIERCOLES,POR_DIA,POR_HORA,SABADO,VIERNES) values (42,42,1,'23','0',1,1,1,1,0,0,1,1);
--------------------------------------------------------
--  DDL for Index TP_ROL_MNEMONICO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_ROL_MNEMONICO" ON "SCAPCIDE"."TP_ROL" ("MNEMONICO", "ID_APLICACION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_PERMISO_MNEMONICO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_PERMISO_MNEMONICO" ON "SCAPCIDE"."TP_PERMISO" ("MNEMONICO", "ID_APLICACION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_APLICACION_MNEMONICO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_APLICACION_MNEMONICO" ON "SCAPCIDE"."TP_APLICACION" ("MNEMONICO", "ID_APLICACION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_EMPRESA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_EMPRESA_PK" ON "SCAPCIDE"."TP_EMPRESA" ("ID_EMPRESA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TR_PERMISO_X_ROL
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TR_PERMISO_X_ROL" ON "SCAPCIDE"."TR_PERMISO_X_ROL" ("ID_ROL", "ID_PERMISO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_USUARIO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_USUARIO_PK" ON "SCAPCIDE"."TP_USUARIO" ("ID_USUARIO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_BLOQUEO_USUARIO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_BLOQUEO_USUARIO" ON "SCAPCIDE"."TP_BLOQUEO" ("USUARIO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_AUDITORIA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_AUDITORIA_PK" ON "SCAPCIDE"."TP_AUDITORIA" ("ID_AUDITORIA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TR_ROL_X_USUARIO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TR_ROL_X_USUARIO" ON "SCAPCIDE"."TR_ROL_X_USUARIO" ("ID_USUARIO", "ID_ROL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_ROL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_ROL_PK" ON "SCAPCIDE"."TP_ROL" ("ID_ROL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_PERMISO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_PERMISO_PK" ON "SCAPCIDE"."TP_PERMISO" ("ID_PERMISO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TS_HORARIO_DETALLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TS_HORARIO_DETALLE_PK" ON "SCAPCIDE"."TS_HORARIO_DETALLE" ("ID_DETALLE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_APLICACION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_APLICACION_PK" ON "SCAPCIDE"."TP_APLICACION" ("ID_APLICACION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_EMPRESA_MNEMONICO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_EMPRESA_MNEMONICO" ON "SCAPCIDE"."TP_EMPRESA" ("MNEMONICO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TS_HORARIO_DETALLE_HORARIO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TS_HORARIO_DETALLE_HORARIO" ON "SCAPCIDE"."TS_HORARIO_DETALLE" ("ID_HORARIO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_CLAVE_ANTIGUA_USUARIO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_CLAVE_ANTIGUA_USUARIO" ON "SCAPCIDE"."TP_CLAVE_ANTIGUA" ("USUARIO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_TEMPLATE_MNEMONICO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_TEMPLATE_MNEMONICO" ON "SCAPCIDE"."TP_TEMPLATE" ("MNEMONICO", "ID_EMPRESA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_ATRIBUTO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_ATRIBUTO_PK" ON "SCAPCIDE"."TP_ATRIBUTO" ("ID_ATRIBUTO", "ID_POLITICA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_TEMPLATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_TEMPLATE_PK" ON "SCAPCIDE"."TP_TEMPLATE" ("ID_TEMPLATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_USUARIO_USUARIO
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_USUARIO_USUARIO" ON "SCAPCIDE"."TP_USUARIO" ("USUARIO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TP_POLITICA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCAPCIDE"."TP_POLITICA_PK" ON "SCAPCIDE"."TP_POLITICA" ("ID_POLITICA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  Constraints for Table TP_ROL
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_ROL" ADD CONSTRAINT "TP_ROL_MNEMONICO" UNIQUE ("MNEMONICO", "ID_APLICACION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_ROL" ADD CONSTRAINT "TP_ROL_PK" PRIMARY KEY ("ID_ROL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_ROL" MODIFY ("ID_ROL" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table TP_AUDITORIA
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_AUDITORIA" ADD CONSTRAINT "TP_AUDITORIA_PK" PRIMARY KEY ("ID_AUDITORIA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_AUDITORIA" MODIFY ("ID_AUDITORIA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TS_ATRIBUTO_APLICACION
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TS_ATRIBUTO_APLICACION" MODIFY ("ID_POLITICA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TP_USUARIO
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_USUARIO" MODIFY ("MAC" NOT NULL ENABLE);
  ALTER TABLE "SCAPCIDE"."TP_USUARIO" MODIFY ("FECHA_LOGIN" NOT NULL ENABLE);
  ALTER TABLE "SCAPCIDE"."TP_USUARIO" MODIFY ("FECHA_CAMBIO_CLAVE" NOT NULL ENABLE);
  ALTER TABLE "SCAPCIDE"."TP_USUARIO" MODIFY ("ESTADO" NOT NULL ENABLE);
  ALTER TABLE "SCAPCIDE"."TP_USUARIO" MODIFY ("CONTRASENA" NOT NULL ENABLE);
  ALTER TABLE "SCAPCIDE"."TP_USUARIO" MODIFY ("USUARIO" NOT NULL ENABLE);
  ALTER TABLE "SCAPCIDE"."TP_USUARIO" ADD CONSTRAINT "TP_USUARIO_USUARIO" UNIQUE ("USUARIO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_USUARIO" ADD CONSTRAINT "TP_USUARIO_PK" PRIMARY KEY ("ID_USUARIO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_USUARIO" MODIFY ("ID_USUARIO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TP_BLOQUEO
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_BLOQUEO" ADD CONSTRAINT "TP_BLOQUEO_USUARIO" UNIQUE ("USUARIO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TR_PERMISO_X_ROL
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TR_PERMISO_X_ROL" ADD CONSTRAINT "TR_PERMISO_X_ROL" UNIQUE ("ID_ROL", "ID_PERMISO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;

--------------------------------------------------------
--  Constraints for Table TP_PERMISO
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_PERMISO" ADD CONSTRAINT "TP_PERMISO_MNEMONICO" UNIQUE ("MNEMONICO", "ID_APLICACION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_PERMISO" ADD CONSTRAINT "TP_PERMISO_PK" PRIMARY KEY ("ID_PERMISO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_PERMISO" MODIFY ("ID_PERMISO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TS_HORARIO_DETALLE
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TS_HORARIO_DETALLE" ADD CONSTRAINT "TS_HORARIO_DETALLE_HORARIO" UNIQUE ("ID_HORARIO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TS_HORARIO_DETALLE" ADD CONSTRAINT "TS_HORARIO_DETALLE_PK" PRIMARY KEY ("ID_DETALLE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TS_HORARIO_DETALLE" MODIFY ("ID_DETALLE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TR_ROL_X_USUARIO
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TR_ROL_X_USUARIO" ADD CONSTRAINT "TR_ROL_X_USUARIO" UNIQUE ("ID_USUARIO", "ID_ROL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TP_CLAVE_ANTIGUA
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_CLAVE_ANTIGUA" ADD CONSTRAINT "TP_CLAVE_ANTIGUA_USUARIO" PRIMARY KEY ("USUARIO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_CLAVE_ANTIGUA" MODIFY ("USUARIO" NOT NULL ENABLE);


--------------------------------------------------------
--  Constraints for Table TP_ATRIBUTO
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_ATRIBUTO" ADD CONSTRAINT "TP_ATRIBUTO_PK" PRIMARY KEY ("ID_ATRIBUTO", "ID_POLITICA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_ATRIBUTO" MODIFY ("ID_POLITICA" NOT NULL ENABLE);
  ALTER TABLE "SCAPCIDE"."TP_ATRIBUTO" MODIFY ("ID_ATRIBUTO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TP_POLITICA
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_POLITICA" ADD CONSTRAINT "TP_POLITICA_PK" PRIMARY KEY ("ID_POLITICA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_POLITICA" MODIFY ("ID_POLITICA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TP_EMPRESA
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_EMPRESA" ADD CONSTRAINT "TP_EMPRESA_MNEMONICO" UNIQUE ("MNEMONICO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_EMPRESA" ADD CONSTRAINT "TP_EMPRESA_PK" PRIMARY KEY ("ID_EMPRESA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_EMPRESA" MODIFY ("ID_EMPRESA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TP_APLICACION
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_APLICACION" ADD CONSTRAINT "TP_APLICACION_MNEMONICO" UNIQUE ("MNEMONICO", "ID_APLICACION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_APLICACION" ADD CONSTRAINT "TP_APLICACION_PK" PRIMARY KEY ("ID_APLICACION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_APLICACION" MODIFY ("ID_APLICACION" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TP_TEMPLATE
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_TEMPLATE" ADD CONSTRAINT "TP_TEMPLATE_MNEMONICO" UNIQUE ("MNEMONICO", "ID_EMPRESA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_TEMPLATE" ADD CONSTRAINT "TP_TEMPLATE_PK" PRIMARY KEY ("ID_TEMPLATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "SCAPCIDE"."TP_TEMPLATE" MODIFY ("ID_TEMPLATE" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table TP_APLICACION
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_APLICACION" ADD CONSTRAINT "TP_APLICACION_EMPRESA_FK" FOREIGN KEY ("ID_EMPRESA")
	  REFERENCES "SCAPCIDE"."TP_EMPRESA" ("ID_EMPRESA") ENABLE;







--------------------------------------------------------
--  Ref Constraints for Table TP_PERMISO
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_PERMISO" ADD CONSTRAINT "TP_PERMISO_APLICACION_FK" FOREIGN KEY ("ID_APLICACION")
	  REFERENCES "SCAPCIDE"."TP_APLICACION" ("ID_APLICACION") ENABLE;

--------------------------------------------------------
--  Ref Constraints for Table TP_ROL
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_ROL" ADD CONSTRAINT "TP_ROL_APLICACION_FK" FOREIGN KEY ("ID_APLICACION")
	  REFERENCES "SCAPCIDE"."TP_APLICACION" ("ID_APLICACION") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TP_TEMPLATE
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TP_TEMPLATE" ADD CONSTRAINT "TP_EMPRESA_TEMP" FOREIGN KEY ("ID_EMPRESA")
	  REFERENCES "SCAPCIDE"."TP_EMPRESA" ("ID_EMPRESA") ENABLE;




--------------------------------------------------------
--  Ref Constraints for Table TS_ATRIBUTO_APLICACION
--------------------------------------------------------

  ALTER TABLE "SCAPCIDE"."TS_ATRIBUTO_APLICACION" ADD CONSTRAINT "TS_ATRIBUTO_EMPRESA_PK" FOREIGN KEY ("ID_EMPRESA")
	  REFERENCES "SCAPCIDE"."TP_EMPRESA" ("ID_EMPRESA") ENABLE;


--------------------------------------------------------
--  DDL for Function GET_TOKEN
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SCAPCIDE"."GET_TOKEN" (
   THE_LIST  VARCHAR2,
   THE_INDEX NUMBER,
   DELIM     VARCHAR2 := ','
)
   RETURN    VARCHAR2
IS
   START_POS NUMBER;
   END_POS   NUMBER;
BEGIN
   IF THE_INDEX = 1 THEN
       START_POS := 1;
   ELSE
       START_POS := INSTR(THE_LIST, DELIM, 1, THE_INDEX - 1);
       IF START_POS = 0 THEN
           RETURN NULL;
       ELSE
           START_POS := START_POS + LENGTH(DELIM);
       END IF;
   END IF;

   END_POS := INSTR(THE_LIST, DELIM, START_POS, 1);

   IF END_POS = 0 THEN
       RETURN SUBSTR(THE_LIST, START_POS);
   ELSE
       RETURN SUBSTR(THE_LIST, START_POS, END_POS - START_POS);
   END IF;

END GET_TOKEN;

/
--------------------------------------------------------
--  DDL for Package PKG_SCA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "SCAPCIDE"."PKG_SCA" as

TYPE T_CURSOR   IS REF CURSOR;

/*
==========================
STORE PROCEDURE DE TEMPLATE
===========================*/
PROCEDURE SPS_CONSULTAR_IMPORTAR(
IS_TIPO                IN VARCHAR2,
IS_ID_EMPRESA          IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPD_ELIMINAR_TEMPLATE(
  IS_ID_TEMPLATE IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2
);

PROCEDURE SPU_ACTUALIZAR_TEMPLATE(
IS_ID_TEMPLATE IN VARCHAR2,
IS_NOMBRE      IN VARCHAR2,
IS_DESCRIPCION IN VARCHAR2,
IS_USUARIO     IN VARCHAR2,
OS_COD_RETORNO  OUT VARCHAR2,
OS_MEN_RETORNO  OUT VARCHAR2
);

PROCEDURE SPS_CONSULTAR_TEMPLATE(
  IS_ID_TEMPLATE IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_TEMPLATES(
  IS_ID_EMPRESA     IN VARCHAR2,
  IS_ID_APLICACION  IN VARCHAR2,
  IS_NOMBRE         IN VARCHAR2,
  IS_TIPO           IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
);



/*
============================
STORE PROCEDURE DE IMPORTAR 
============================*/
PROCEDURE SPI_IMPORTAR_TEMPLATE(
  IS_MNEMONICO    IN VARCHAR2,
  IS_NOMBRE       IN VARCHAR2,
  IS_ESTADO       IN VARCHAR2,
  IS_TIPO         IN VARCHAR2,
  IS_DESCRIPCION  IN VARCHAR2,
  IS_ID_EMPRESA   IN VARCHAR2,
  IS_ID_APLICACION IN VARCHAR2,
  IS_USUARIO      IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2,
  OS_ID_TEMPLATE  OUT NUMBER
);

PROCEDURE SPI_REGISTRAR_TEMPLATE(
  IS_MNEMONICO    IN VARCHAR2,
  IS_NOMBRE       IN VARCHAR2,
  IS_ESTADO       IN VARCHAR2,
  IS_TIPO         IN VARCHAR2,
  IS_DESCRIPCION  IN CLOB,
  IS_ID_EMPRESA   IN VARCHAR2,
  IS_ID_APLICACION IN VARCHAR2,
  IS_USUARIO    IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2,
  OS_ID_TEMPLATE  OUT NUMBER
);

PROCEDURE SPS_CONSULTAR_PERMISO_ROL(
  IS_ID_ROL  IN VARCHAR2,
  OS_COD_RETORNO    OUT VARCHAR2,
  OS_MEN_RETORNO    OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
);

/*
==========================
STORE PROCEDURE DE AUDITORIA
===========================*/
PROCEDURE SPS_CONSULTAR_AUDITORIA(
IS_USUARIO             IN VARCHAR2,
IS_METODO              IN VARCHAR2,
IS_IP                  IN VARCHAR2,
IS_EMPRESA             IN VARCHAR2,
IS_FECHA_INICIO        IN VARCHAR2,
IS_FECHA_FIN           IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);


/*
==========================
STORE PROCEDURE DE LOGIN
===========================*/

PROCEDURE SPS_CONSULTAR_CREDENCIALES(
IS_USUARIO            IN VARCHAR2,
OS_COD_RETORNO        OUT VARCHAR2,
OS_MEN_RETORNO        OUT VARCHAR2,
OS_CURSOR             OUT T_CURSOR
);


/*
==========================
STORE PROCEDURE DE EMPRESA
===========================*/
PROCEDURE SPS_CONSULTAR_EMPRESA_DATA(
  IS_TIPO IN NUMBER,
  OS_COD_RETORNO       OUT VARCHAR2,
  OS_MEN_RETORNO       OUT VARCHAR2,
  OS_CURSOR            OUT T_CURSOR
);

PROCEDURE SPI_REGISTRAR_EMPRESA(
IS_MNEMONICO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_DESCRIPCION IN VARCHAR2,
IS_ESTADO IN VARCHAR2,
IS_USUARIO IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_COD_EMPRESA           OUT NUMBER
);

PROCEDURE SPU_ACTUALIZAR_EMPRESA(
IS_ID_EMPRESA   IN NUMBER,
IS_NOMBRE     IN VARCHAR2,
IS_DESCRIPCION  IN VARCHAR2,
IS_ESTADO     IN VARCHAR2,
IS_USUARIO      IN VARCHAR2,
OS_COD_RETORNO  OUT VARCHAR2,
OS_MEN_RETORNO  OUT VARCHAR2
);

PROCEDURE SPD_ELIMINAR_EMPRESA(
IS_ID_EMPRESA IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);

PROCEDURE SPS_CONSULTAR_EMPRESA(
IS_ID_EMPRESA          IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_EMPRESA_TODAS(
IS_NOMBRE VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_PERM_TODAS(
IS_PERMISO IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
IS_ID_EMPRESA IN VARCHAR2,
IS_TIPO_PERMISO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);


/*
==========================
STORE PROCEDURE DE USUARIO
===========================*/

PROCEDURE SPS_USUARIO_CAMBIAR_PASS(
IS_ID_USUARIO       IN NUMBER,
IS_MAC              IN VARCHAR2,
IS_PASSWORD         IN VARCHAR2,
IS_USUARIO      IN VARCHAR2,
OS_EMAIL            OUT VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
);

PROCEDURE SPI_REGISTRAR_USUARIO(
IS_ID_EMPRESA IN NUMBER,
IS_USUARIO IN VARCHAR2,
IS_CONTRASENA IN VARCHAR2,
IS_APELLIDOMATERNO IN VARCHAR2,
IS_APELLIDOPATERNO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_CORREO IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_TIPODOCUMENTO IN VARCHAR2,
IS_NUMERODOCUMENTO IN VARCHAR2,
IS_TELEFONO IN VARCHAR2,
IS_FECHACAMBIOCLAVE IN TIMESTAMP,
IS_FECHALOGIN IN TIMESTAMP,
IS_MAC IN VARCHAR2,
IS_USUARIO_AGR  IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_ID_USUARIO            OUT NUMBER
);

PROCEDURE SPU_ACTUALIZAR_USUARIO(
IS_ID_USUARIO IN NUMBER,
IS_ID_EMPRESA IN NUMBER,
IS_USUARIO IN VARCHAR2,
--IS_CONTRASENA IN VARCHAR2,
--IS_APELLIDOMATERNO IN VARCHAR2,
IS_APELLIDOPATERNO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_CORREO IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_TIPODOCUMENTO IN VARCHAR2,
IS_NUMERODOCUMENTO IN VARCHAR2,
IS_TELEFONO IN VARCHAR2,
--IS_FECHACAMBIOCLAVE IN TIMESTAMP,
--IS_FECHALOGIN IN TIMESTAMP,
IS_MAC IN VARCHAR2,
IS_USUARIO_AGR     IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);


PROCEDURE SPU_ACTUALIZAR_DATOS(
IS_ID_USUARIO IN NUMBER,
IS_ID_EMPRESA IN NUMBER,
IS_USUARIO IN VARCHAR2,
IS_CONTRASENA IN VARCHAR2,
IS_APELLIDOMATERNO IN VARCHAR2,
IS_APELLIDOPATERNO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_CORREO IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_TIPODOCUMENTO IN VARCHAR2,
IS_NUMERODOCUMENTO IN VARCHAR2,
IS_TELEFONO IN VARCHAR2,
IS_FECHACAMBIOCLAVE IN TIMESTAMP,
IS_FECHALOGIN IN TIMESTAMP,
IS_MAC IN VARCHAR2,
IS_FECHAMODIFICACION IN TIMESTAMP,
IS_USUARIOMODIFICACION IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);

PROCEDURE SPD_ELIMINAR_USUARIO(
IS_ID_USUARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);

PROCEDURE SPS_CONSULTAR_USUARIO(
IS_COD_USUARIO        IN NUMBER, 
IS_USUARIO            IN VARCHAR2,
OS_COD_RETORNO        OUT VARCHAR2,
OS_MEN_RETORNO        OUT VARCHAR2,
OS_CURSOR             OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_USUARIO_LOGIN(
IS_USUARIO            IN VARCHAR2,
OS_COD_RETORNO        OUT VARCHAR2,
OS_MEN_RETORNO        OUT VARCHAR2,
OS_CURSOR             OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_USUARIO_TODOS(
IS_ID_EMPRESA          IN NUMBER,
IS_NOMBRE              IN VARCHAR2,
IS_APELLIDO            IN VARCHAR2,
IS_ESTADO              IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_ROL_POR_USUARIO(
IS_USUARIO          IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_PERM_POR_USUARIO(
IS_USUARIO          IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);


PROCEDURE SPS_VERI_SUPER_USUARIO(
IS_USUARIO        IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_USU_DES_BLO(
  IS_ID_EMPRESA          IN VARCHAR2,
  IS_NOMBRE              IN VARCHAR2, 
  IS_ESTADO              IN VARCHAR2,
  OS_COD_RETORNO         OUT VARCHAR2,
  OS_MEN_RETORNO         OUT VARCHAR2,
  OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPU_REGISTRAR_USU_DES_BLO(
  IS_USUARIOS          IN VARCHAR2,
  IS_USUARIO       IN VARCHAR2,
  IS_ESTADO              IN VARCHAR2,
  OS_COD_RETORNO         OUT VARCHAR2,
  OS_MEN_RETORNO         OUT VARCHAR2,
  OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_DETALLE_AUD(
IS_ID_AUDITORIA        IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);


PROCEDURE SPU_ACTUALIZAR_USUARIO_ESTADO(
IS_ID_USUARIO IN NUMBER,
IS_ESTADO IN VARCHAR2,
IS_CONTRASENA IN VARCHAR2,
IS_FECHACAMBIOCLAVE IN TIMESTAMP,
IS_USUARIO_AGR     IN VARCHAR2,
OS_COD_RETORNO     OUT VARCHAR2,
OS_MEN_RETORNO     OUT VARCHAR2
);

/*
==========================
STORE PROCEDURE DE APLICACION
===========================*/

PROCEDURE SPS_CONSULTAR_APLICACIONES_USU(
  IS_ID_EMPRESA IN VARCHAR2,
  OS_COD_RETORNO         OUT VARCHAR2,
  OS_MEN_RETORNO         OUT VARCHAR2,
  OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_APLICACION_DATA(
  IS_TIPO IN NUMBER,
  OS_COD_RETORNO         OUT VARCHAR2,
  OS_MEN_RETORNO         OUT VARCHAR2,
  OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPI_REGISTRAR_APLICACION(
IS_ID_EMPRESA IN NUMBER,
IS_MNEMONICO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_DESCRIPCION IN VARCHAR2,
IS_ESTADO IN VARCHAR2,
IS_POLITICA IN VARCHAR2,
IS_USUARIO  IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_COD_ID_APLICACION     OUT NUMBER
);

PROCEDURE SPU_ACTUALIZAR_APLICACION(
IS_ID_APLICACION   IN NUMBER,
IS_NOMBRE       IN VARCHAR2,
IS_DESCRIPCION     IN VARCHAR2,
IS_ESTADO       IN VARCHAR,
IS_POLITICA     IN VARCHAR,
IS_USUARIO       IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
);

PROCEDURE SPD_ELIMINAR_APLICACION(
IS_ID_APLICACION IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);

PROCEDURE SPS_CONSULTAR_APLICACION(
IS_ID_APLICACION       IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPU_ACTIVAR_POLITICA(
IS_ID_APLICACION   IN NUMBER,
IS_ESTADO       IN VARCHAR2,
IS_USUARIO       IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
);

PROCEDURE SPS_CONSULTAR_APLICACION_TODAS(
IS_ID_EMPRESA          IN NUMBER,
IS_NOMBRE              IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_APLICACION_EMP(
IS_ID_EMPRESA           IN VARCHAR2,
OS_COD_RETORNO          OUT VARCHAR2,
OS_MEN_RETORNO          OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_USUARIOS_EMP(
IS_ID_EMPRESA           IN VARCHAR2,
OS_COD_RETORNO          OUT VARCHAR2,
OS_MEN_RETORNO          OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);


PROCEDURE SPS_REG_ROLES_USER_APP(
IS_ROLES               IN VARCHAR2,
IS_APLICACION          IN NUMBER,
IS_USUARIO             IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
);

PROCEDURE SPS_CONSULTAR_PICKDATA_ROLES(
IS_APLICACION          IN NUMBER,
IS_USUARIO             IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_REG_PERM_ROL_APP(
IS_PERMISOS               IN VARCHAR2,
IS_ROL             IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
);

PROCEDURE SPS_REG_ROL_X_ROL_APP(
IS_ROLES               IN VARCHAR2,
IS_ROL             IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
);


/*
==========================
STORE PROCEDURE DE ROL
===========================*/


PROCEDURE SPI_REGISTRAR_ROL(
IS_ID_APLICACION NUMBER,
IS_MNEMONICO   IN VARCHAR2,
IS_NOMBRE     IN VARCHAR2,
IS_DESCRIPCION   IN VARCHAR2,
IS_ESTADO     IN VARCHAR2,
IS_USUARIO     IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_COD_ROL          OUT NUMBER,
OS_EMPRESA          OUT VARCHAR2
);

PROCEDURE SPU_ACTUALIZAR_ROL(
IS_ID_ROL       IN NUMBER,
IS_NOMBRE       IN VARCHAR2,
IS_MNEMONICO     IN VARCHAR2,
IS_DESCRIPCION     IN VARCHAR2,
IS_ESTADO       IN VARCHAR2,
IS_USUARIO      IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2,
OS_EMPRESA      OUT VARCHAR2
);

PROCEDURE SPD_ELIMINAR_ROL(
IS_ID_ROL IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);


PROCEDURE SPS_CONSULTAR_ROL(
IS_ROL IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_ROL_TODAS(
IS_ROL IN VARCHAR2,
IS_ID_EMPRESA IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_ROLES(
IS_USUARIO IN VARCHAR2,
IS_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);



PROCEDURE SPS_CONSULTAR_ROL_APLI_DATA(
IS_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_ROL_DATA(
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_PERMISO_DATA(
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_ROL_PADRES(
IS_ROL IN NUMBER,
IS_APLICACION IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

/*
==========================
STORE PROCEDURE DE PERMISO
===========================*/

PROCEDURE SPI_REGISTRAR_PERMISO(
IS_ID_APLICACION   NUMBER,
IS_MNEMONICO     IN VARCHAR2,
IS_NOMBRE       IN VARCHAR2,
IS_DESCRIPCION     IN VARCHAR2,
IS_ESTADO       IN VARCHAR2,
IS_TIPO       IN VARCHAR2,
IS_USUARIO       IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2,
OS_COD_ID_PERMISO   OUT NUMBER
);

PROCEDURE SPU_ACTUALIZAR_PERMISO(
IS_ID_PERMISO     IN NUMBER,
IS_NOMBRE       IN VARCHAR2,
IS_MNEMONICO     IN VARCHAR2,
IS_DESCRIPCION     IN VARCHAR2,
IS_ESTADO       IN VARCHAR2,
IS_TIPO       IN VARCHAR2,
IS_USUARIO       IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
);

PROCEDURE SPD_ELIMINAR_PERMISO(
IS_ID_PERMISO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);

PROCEDURE SPS_CONSULTAR_PERMISO(
IS_PERMISO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_PERMISOS(
IS_EMPRESA IN VARCHAR2,
IS_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_PERMISO_TODAS(
IS_PERMISO IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_PERMISO_POR_ROL(
IS_ROL          IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

/*
==========================
STORE PROCEDURE DE POLITICA
===========================*/

PROCEDURE SPS_CONSULTAR_POLITICAS(
IS_OPCION         IN VARCHAR2,
IS_ID_EMPRESA     IN VARCHAR2,
OS_COD_RETORNO    OUT VARCHAR2,
OS_MEN_RETORNO    OUT VARCHAR2,
OS_CURSOR         OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_POLITICA(
IS_EVENTO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_POLITICA_X_EMP(
IS_ID_EMPRESA          IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_POLITICA_X_APLI(
IS_ID_EMPRESA    IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPS_ACTUALIZAR_POLITICA(
IS_ID_POLITICA IN VARCHAR2,
IS_ID_ATRIBUTO IN VARCHAR2,
IS_ID_EMPRESA  IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
IS_VALOR IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
);

PROCEDURE SPS_ACTUALIZAR_POLITICA_APP(
IS_ID_POLITICA IN VARCHAR2,
IS_ID_ATRIBUTO IN VARCHAR2,
IS_ID_EMPRESA  IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
IS_VALOR IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
);



/*
==========================
STORE PROCEDURE DE ATRIBUTO
===========================*/

PROCEDURE SPS_CONSULTAR_ATRIBUTO_EMPRESA(
IS_EMPRESA IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);


PROCEDURE SPS_CONSULTAR_ATRIBUTO_APP(
IS_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

/*
==========================
STORE PROCEDURE BLOQUEO
===========================*/

PROCEDURE SPI_REGISTRAR_BLOQUEO(
IS_USUARIO IN VARCHAR2,
IS_EMPRESA IN VARCHAR2,
IS_ESTADO IN VARCHAR2,
IS_FECHA IN TIMESTAMP,
IS_INTENTOSFALLIDOS IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2

);

PROCEDURE SPU_ACTUALIZAR_BLOQUEO(
IS_USUARIO IN VARCHAR2,
IS_ESTADO IN VARCHAR2,
IS_FECHA IN TIMESTAMP,
IS_INTENTOSFALLIDOS IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2

);

PROCEDURE SPS_CONSULTAR_BLOQUEO(
IS_USUARIO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

/*
==========================
STORE PROCEDURE CLAVEANTIGUA
===========================*/

PROCEDURE SPS_CONSULTAR_CLAVEANTIGUA(
IS_USUARIO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPI_REGISTRAR_CLAVEANTIGUA(
IS_USUARIO IN VARCHAR2,
IS_EMPRESA IN VARCHAR2,
IS_PASSWORDS IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2

);

PROCEDURE SPU_ACTUALIZAR_CLAVEANTIGUA(
PASSWORDS IN VARCHAR2,
IS_USUARIO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2

);

/*
==========================
STORE PROCEDURE DE LLAVE
===========================*/

PROCEDURE SPI_REGISTRAR_LLAVE(
IS_NOMBRE IN VARCHAR2,
IS_VALOR_NUEVO IN VARCHAR2,
IS_TIPO_LLAVE IN VARCHAR2,
IS_TIPO_GENERACION IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_AUD_USUARIO_CREACION IN VARCHAR2,
IS_AUD_FECHA_CREACION IN TIMESTAMP,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

);

PROCEDURE SPU_ACTUALIZAR_LLAVE(
IS_ID_LLAVE IN NUMBER,
IS_NOMBRE IN VARCHAR2,
IS_VALOR_NUEVO IN VARCHAR2,
IS_TIPO_LLAVE IN VARCHAR2,
IS_TIPO_GENERACION IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_AUD_USUARIO_MODIFICACION IN VARCHAR2,
IS_AUD_FECHA_MODIFICACION IN TIMESTAMP,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

);

PROCEDURE SPD_ELIMINAR_LLAVE(
IS_ID_LLAVE IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);

PROCEDURE SPS_CONSULTAR_LLAVE_SEGUN_TIPO(
IS_TIPO_LLAVE IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);


/*
==========================
STORE PROCEDURE HORARIO
===========================*/
PROCEDURE SPS_CONSULTAR_HORARIO(
IS_HORARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR);


PROCEDURE SPS_CONSULTAR_HORARIO_EMPRESA(
IS_EMPRESA IN NUMBER,
IS_CODIGO_HORARIO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_HORARIO_TODAS(
IS_NOMBRE IN VARCHAR2,
IS_TIPO IN VARCHAR2,
IS_EMPRESA IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

PROCEDURE SPI_REGISTRAR_HORARIO(
IS_ID_APLICACION  IN NUMBER,
IS_ID_EMPRESA     IN NUMBER,
IS_ID_USUARIO     IN NUMBER,
IS_TIPO       IN VARCHAR2,
IS_MNEMONICO     IN VARCHAR2,
IS_NOMBRE       IN VARCHAR2,
IS_MAC         IN VARCHAR2,
IS_USUARIO      IN VARCHAR2,
OS_ID_HORARIO       OUT NUMBER,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
);

PROCEDURE SPI_REGISTRAR_HORARIO_DET(
IS_ID_HORARIO IN NUMBER,
IS_DOMINGO IN NUMBER,
IS_HORA_FIN IN VARCHAR2,
IS_HORA_INICIO IN VARCHAR,
IS_JUEVES IN NUMBER,
IS_LUNES IN NUMBER,
IS_MARTES IN NUMBER,
IS_MIERCOLES IN NUMBER,
IS_POR_DIA IN NUMBER,
IS_POR_HORA IN NUMBER,
IS_SABADO IN NUMBER,
IS_VIERNES IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);

PROCEDURE SPU_ACTUALIZAR_HORARIO(
IS_ID_APLICACION NUMBER,
IS_ID_EMPRESA    NUMBER,
IS_ID_USUARIO    IN VARCHAR2,
IS_TIPO      IN VARCHAR2,
IS_MNEMONICO    IN VARCHAR2,
IS_NOMBRE      IN VARCHAR2,
IS_MAC        IN VARCHAR2,
IS_USUARIO       IN VARCHAR2,
IS_ID_HORARIO    IN NUMBER,
OS_COD_RETORNO   OUT VARCHAR2,
OS_MEN_RETORNO   OUT VARCHAR2
);

PROCEDURE SPU_ACTUALIZAR_HORARIO_DET(
IS_ID_HORARIO IN NUMBER,
IS_ID_DETALLE IN NUMBER,
IS_DOMINGO IN NUMBER,
IS_HORA_FIN IN VARCHAR2,
IS_HORA_INICIO IN VARCHAR,
IS_JUEVES IN NUMBER,
IS_LUNES IN NUMBER,
IS_MARTES IN NUMBER,
IS_MIERCOLES IN NUMBER,
IS_POR_DIA IN NUMBER,
IS_POR_HORA IN NUMBER,
IS_SABADO IN NUMBER,
IS_VIERNES IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);

PROCEDURE SPD_ELIMINAR_HORARIO(
IS_ID_HORARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);


PROCEDURE SPD_ELIMINAR_HORARIO_DET(
IS_ID_HORARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
);

PROCEDURE SPS_OBTENER_CODIGO_HORARIO(
IS_TIPO IN VARCHAR2,
IS_ID_DATA IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR);

PROCEDURE SPS_CONSULTAR_HORARIO_DET(
IS_HORARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR);

PROCEDURE SPS_CONSULTAR_USUARIO_ADAPTER(
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);


/*
==========================
STORE PROCEDURE IMPORTAR
===========================*/



PROCEDURE SPS_CONSULTAR_ROL_X_APP(
  IS_ID_APLICACION  IN VARCHAR2,
  OS_COD_RETORNO    OUT VARCHAR2,
  OS_MEN_RETORNO    OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_APP(																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									
  IS_ID_APLICACION  IN VARCHAR2,
  OS_COD_RETORNO    OUT VARCHAR2,
  OS_MEN_RETORNO    OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_APP_EMP(
IS_APLICACION        IN VARCHAR2,
IS_EMPRESA    IN VARCHAR2,
OS_COD_RETORNO          OUT VARCHAR2,
OS_MEN_RETORNO          OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_ROL_USUARIO(
  IS_ID_EMPRESA     IN VARCHAR2,
  IS_ID_USUARIO     IN VARCHAR2,
  OS_COD_RETORNO    OUT VARCHAR2,
  OS_MEN_RETORNO    OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
);

PROCEDURE SPS_CONSULTAR_PERMISO_IMPORT(
IS_ID_APLICACION IN VARCHAR2,
IS_MNEMONICO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
);

FUNCTION FUN_EMPRESA_X_APLICACION(
IS_ID_APLICACION IN NUMBER) RETURN VARCHAR2;

END PKG_SCA;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SCA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "SCAPCIDE"."PKG_SCA" AS

/*
==========================
STORE PROCEDURE DE TEMPLATE
===========================*/

PROCEDURE SPD_ELIMINAR_TEMPLATE(
  IS_ID_TEMPLATE IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2
)
IS
BEGIN
  DELETE FROM TP_TEMPLATE WHERE ID_TEMPLATE = TO_NUMBER(IS_ID_TEMPLATE);
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;

PROCEDURE SPU_ACTUALIZAR_TEMPLATE(
IS_ID_TEMPLATE IN VARCHAR2,
IS_NOMBRE      IN VARCHAR2,
IS_DESCRIPCION IN VARCHAR2,
IS_USUARIO     IN VARCHAR2,
OS_COD_RETORNO  OUT VARCHAR2,
OS_MEN_RETORNO  OUT VARCHAR2
)
IS 
BEGIN
  
  UPDATE TP_TEMPLATE SET NOMBRE = IS_NOMBRE, DESCRIPCION = IS_DESCRIPCION, AUD_USU_MODIF = IS_USUARIO,  AUD_FEC_MODIF = SYSDATE 
  WHERE ID_TEMPLATE = IS_ID_TEMPLATE;

  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;

PROCEDURE SPS_CONSULTAR_TEMPLATE(
  IS_ID_TEMPLATE IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
)
IS
  T_QUERY VARCHAR2(500);
BEGIN
  
  T_QUERY := 'SELECT ID_TEMPLATE, MNEMONICO, NOMBRE, TIPO, DESCRIPCION FROM TP_TEMPLATE WHERE ID_TEMPLATE = ' || IS_ID_TEMPLATE;

  OPEN OS_CURSOR FOR T_QUERY;

  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;


PROCEDURE SPS_CONSULTAR_TEMPLATES(
  IS_ID_EMPRESA     IN VARCHAR2,
  IS_ID_APLICACION  IN VARCHAR2,
  IS_NOMBRE         IN VARCHAR2,
  IS_TIPO           IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
)
IS
  T_QUERY VARCHAR2(500);
BEGIN 

  T_QUERY := 'SELECT ID_TEMPLATE, NOMBRE, TIPO, DESCRIPCION FROM TP_TEMPLATE WHERE 1=1 ';
  
  IF IS_TIPO <> '-1' THEN
    T_QUERY := T_QUERY || ' AND TIPO = ''' || IS_TIPO || '''';
  END IF;
  
  IF IS_NOMBRE IS NOT NULL THEN
    T_QUERY := T_QUERY || ' AND NOMBRE LIKE ''' || IS_NOMBRE || '%''';
  END IF;
  
  IF IS_ID_EMPRESA IS NOT NULL THEN
    T_QUERY := T_QUERY || ' AND MNEMONICO = ''' || IS_ID_EMPRESA || '''';
  END IF;

  IF IS_ID_APLICACION IS NOT NULL THEN
    T_QUERY := T_QUERY || ' AND MNEMONICO = ''' || IS_ID_APLICACION || '''';
  END IF;
  
  OPEN OS_CURSOR FOR T_QUERY;

  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;


/*
==========================
STORE PROCEDURE DE AUDITORIA
===========================*/

PROCEDURE SPS_CONSULTAR_DETALLE_AUD(
IS_ID_AUDITORIA        IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
  T_QUERY VARCHAR2(400);
BEGIN
  T_QUERY := 'SELECT VALORES_ANTIGUOS AS ANTIGUO, VALORES_NUEVOS AS NUEVO FROM TP_AUDITORIA WHERE ID_AUDITORIA =' || TO_NUMBER(IS_ID_AUDITORIA);
  
  OPEN OS_CURSOR FOR T_QUERY;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;


PROCEDURE SPS_CONSULTAR_AUDITORIA(
IS_USUARIO             IN VARCHAR2,
IS_METODO              IN VARCHAR2,
IS_IP                  IN VARCHAR2,
IS_EMPRESA          IN VARCHAR2,
IS_FECHA_INICIO        IN VARCHAR2,
IS_FECHA_FIN           IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS 
T_QUERY VARCHAR2(1000);
BEGIN
  
  T_QUERY := 'SELECT ID_AUDITORIA AS ID, TO_CHAR(FECHA, ''dd/MM/yyyy HH:mm:ss'') AS FECHA, USUARIO, MENU, CLASE, METODO, MODULO, IP FROM TP_AUDITORIA WHERE 1=1';
  
  IF IS_USUARIO IS NOT NULL THEN
    T_QUERY := T_QUERY || ' AND USUARIO = ''' || IS_USUARIO || '''';
  END IF;
  
  IF TRIM(IS_METODO) IS NOT NULL THEN
    T_QUERY := T_QUERY || ' AND METODO = ''' || IS_METODO || '''';
  END IF;
  
  IF TRIM(IS_IP) IS NOT NULL THEN
    T_QUERY := T_QUERY || ' AND IP = ''' || IS_IP || '''';
  END IF;
  
  IF TRIM(IS_EMPRESA) IS NOT NULL AND IS_EMPRESA <> '-1' THEN
    T_QUERY := T_QUERY || ' AND EMPRESA = ''' || IS_EMPRESA || '''';
  END IF;
  
  IF (TRIM(IS_FECHA_INICIO) IS NOT NULL) AND (TRIM(IS_FECHA_FIN) IS NOT NULL)  THEN
    T_QUERY := T_QUERY || ' AND TO_DATE(TO_CHAR(FECHA,''DD/MM/YYYY''), ''DD/MM/YYYY'') BETWEEN TO_DATE(''' || IS_FECHA_INICIO || ''', ''DD/MM/YYYY'') AND TO_DATE(''' || IS_FECHA_FIN || ''', ''DD/MM/YYYY'')' ;
  ELSIF TRIM(IS_FECHA_INICIO) IS NOT NULL THEN
    T_QUERY := T_QUERY || ' AND TO_CHAR(FECHA,''DD/MM/YYYY'') = ''' || IS_FECHA_INICIO || '''';
  ELSIF TRIM(IS_FECHA_FIN) IS NOT NULL THEN
    T_QUERY := T_QUERY || ' AND TO_CHAR(FECHA,''DD/MM/YYYY'') = ''' || IS_FECHA_FIN || '''';
  END IF;
  
  OPEN OS_CURSOR FOR T_QUERY;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;

/*
==========================
STORE PROCEDURE DE LOGIN
===========================*/

PROCEDURE SPS_CONSULTAR_CREDENCIALES(
IS_USUARIO            IN VARCHAR2,
OS_COD_RETORNO        OUT VARCHAR2,
OS_MEN_RETORNO        OUT VARCHAR2,
OS_CURSOR             OUT T_CURSOR
)
IS
V_CURSOR      T_CURSOR;
T_QUERY       VARCHAR2(1000);
BEGIN
   
  T_QUERY := ' SELECT e.ID_EMPRESA,e.MNEMONICO AS EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,u.NOMBRE,APELLIDOPATERNO, ' ||
             ' APELLIDOMATERNO,CORREO,u.ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,' ||
             ' TO_CHAR(FECHA_CAMBIO_CLAVE, ''yyyy-MM-dd HH:mm:ss'') AS FECHA_CAMBIO_CLAVE,TO_CHAR(FECHA_LOGIN, ''yyyy-MM-dd HH:mm:ss'') AS  FECHA_LOGIN,MAC ' ||
             ' FROM TP_USUARIO u LEFT JOIN TP_EMPRESA e ON u.ID_EMPRESA=e.ID_EMPRESA ' ||
             ' WHERE 1=1';
              
   IF IS_USUARIO IS NOT NULL THEN
     T_QUERY := T_QUERY || ' AND USUARIO = ''' || IS_USUARIO || '''';
   END IF;
      
   OPEN OS_CURSOR FOR T_QUERY;
      
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


/*
==========================
STORE PROCEDURE DE EMPRESA
===========================*/
PROCEDURE SPS_CONSULTAR_EMPRESA_DATA(
  IS_TIPO IN NUMBER,
  OS_COD_RETORNO       OUT VARCHAR2,
  OS_MEN_RETORNO       OUT VARCHAR2,
  OS_CURSOR            OUT T_CURSOR
)
IS
BEGIN
  IF IS_TIPO = 1 THEN
    OPEN OS_CURSOR FOR SELECT ID_EMPRESA AS CODIGO, NOMBRE FROM TP_EMPRESA;
  ELSE 
    OPEN OS_CURSOR FOR SELECT MNEMONICO AS CODIGO, NOMBRE FROM TP_EMPRESA;
  END IF;
  
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Empresas consultadas correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
  
END;

PROCEDURE SPI_REGISTRAR_EMPRESA(
IS_MNEMONICO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_DESCRIPCION IN VARCHAR2,
IS_ESTADO IN VARCHAR2,
IS_USUARIO IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,

OS_MEN_RETORNO           OUT VARCHAR2,
OS_COD_EMPRESA           OUT NUMBER
)
IS
  CONT NUMBER;
BEGIN
 
 SELECT COUNT(1) INTO CONT FROM TP_EMPRESA WHERE MNEMONICO = IS_MNEMONICO;

 IF CONT = 0 THEN 

 INSERT INTO TP_EMPRESA(
                ID_EMPRESA,
                MNEMONICO,
                NOMBRE,
                DESCRIPCION,
                ESTADO,
        AUD_FEC_CREAC,
        AUD_USU_CREAC
                )
            VALUES(
                SEQ_EMPRESA.NEXTVAL,
                IS_MNEMONICO,
                IS_NOMBRE,
                IS_DESCRIPCION,
                IS_ESTADO, SYSDATE, IS_USUARIO) RETURNING ID_EMPRESA INTO OS_COD_EMPRESA;             
                
    INSERT INTO TS_ATRIBUTO_EMPRESA(ID_POLITICA,ID_ATRIBUTO, EMPRESA,VALOR)
                                    SELECT ID_POLITICA, ID_ATRIBUTO, IS_MNEMONICO, VALOR FROM TS_ATRIBUTO_EMPRESA
                                      WHERE EMPRESA = (SELECT MNEMONICO FROM TP_EMPRESA WHERE ID_EMPRESA = 1);
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Empresa registrada correctamente.';
ELSE
  OS_COD_RETORNO := '10';
  OS_MEN_RETORNO := 'La empresa ya existe';
END IF;


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;          

END;

PROCEDURE SPU_ACTUALIZAR_EMPRESA(
IS_ID_EMPRESA   IN NUMBER,
IS_NOMBRE     IN VARCHAR2,
IS_DESCRIPCION  IN VARCHAR2,
IS_ESTADO     IN VARCHAR2,
IS_USUARIO      IN VARCHAR2,
OS_COD_RETORNO  OUT VARCHAR2,
OS_MEN_RETORNO  OUT VARCHAR2
)
IS

BEGIN

 UPDATE TP_EMPRESA SET NOMBRE = IS_NOMBRE,
                       DESCRIPCION = IS_DESCRIPCION,
                       ESTADO = IS_ESTADO,
             AUD_FEC_MODIF = SYSDATE,
             AUD_USU_MODIF = IS_USUARIO
             WHERE ID_EMPRESA = IS_ID_EMPRESA;
                
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Empresa actualizada correctamente.';


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPD_ELIMINAR_EMPRESA(
IS_ID_EMPRESA IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

)
IS
EX_NO_DELETE exception;
pragma exception_init (EX_NO_DELETE,-02292);

BEGIN

 DELETE TS_ATRIBUTO_EMPRESA WHERE EMPRESA = (SELECT MNEMONICO FROM TP_EMPRESA WHERE ID_EMPRESA = IS_ID_EMPRESA);
 DELETE TP_EMPRESA WHERE ID_EMPRESA= IS_ID_EMPRESA;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Empresa eliminada correctamente.';

EXCEPTION
WHEN EX_NO_DELETE THEN
    OS_COD_RETORNO := '30';
    OS_MEN_RETORNO := 'La empresa no puede ser eliminada porque se encuentra asociada a un usuario / aplicaci&oacute;n.';


WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_EMPRESA(
IS_ID_EMPRESA          IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;

BEGIN
   
   OPEN V_CURSOR FOR
    SELECT ID_EMPRESA,
	  MNEMONICO,
	  NOMBRE,
	  ESTADO,
	  DESCRIPCION
		FROM TP_EMPRESA 
    WHERE ID_EMPRESA = IS_ID_EMPRESA;             
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_EMPRESA_TODAS(
IS_NOMBRE VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;

BEGIN

   IF IS_NOMBRE IS NULL THEN
     T_QUERY := 'SELECT ID_EMPRESA, MNEMONICO, NOMBRE, DESCRIPCION, ESTADO FROM TP_EMPRESA';     
      ELSE
   T_QUERY := 'SELECT ID_EMPRESA, MNEMONICO, NOMBRE, DESCRIPCION, ESTADO FROM TP_EMPRESA WHERE NOMBRE LIKE '''||IS_NOMBRE || '%''' ;  
    END IF;
   
   OPEN V_CURSOR FOR T_QUERY;
     OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


/*
==========================
STORE PROCEDURE DE USUARIO
===========================*/
PROCEDURE SPS_USUARIO_CAMBIAR_PASS(
IS_ID_USUARIO       IN NUMBER,
IS_MAC              IN VARCHAR2,
IS_PASSWORD         IN VARCHAR2,
IS_USUARIO      IN VARCHAR2,
OS_EMAIL            OUT VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
)
IS

BEGIN
  UPDATE TP_USUARIO SET CONTRASENA = IS_PASSWORD, ESTADO = 'RESETEADO', MAC = IS_MAC, AUD_FEC_MODIF = SYSDATE, AUD_USU_MODIF = IS_USUARIO 
  WHERE ID_USUARIO=IS_ID_USUARIO;
  
  SELECT CORREO INTO OS_EMAIL FROM TP_USUARIO WHERE ID_USUARIO=IS_ID_USUARIO;
  COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Usuario modificado correctamente.';


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;

PROCEDURE SPI_REGISTRAR_USUARIO(
IS_ID_EMPRESA IN NUMBER,
IS_USUARIO IN VARCHAR2,
IS_CONTRASENA IN VARCHAR2,
IS_APELLIDOMATERNO IN VARCHAR2,
IS_APELLIDOPATERNO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_CORREO IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_TIPODOCUMENTO IN VARCHAR2,
IS_NUMERODOCUMENTO IN VARCHAR2,
IS_TELEFONO IN VARCHAR2,
IS_FECHACAMBIOCLAVE IN TIMESTAMP,
IS_FECHALOGIN IN TIMESTAMP,
IS_MAC IN VARCHAR2,
IS_USUARIO_AGR  IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_ID_USUARIO            OUT NUMBER
)
IS
 CONT NUMBER;
 EMPRESA VARCHAR2(200);
BEGIN
  
  SELECT COUNT(1) INTO CONT FROM TP_USUARIO WHERE USUARIO = IS_USUARIO;
  
  IF CONT = 0 THEN 

 INSERT INTO TP_USUARIO(
                ID_EMPRESA,
                ID_USUARIO,
                USUARIO,
                CONTRASENA,
                APELLIDOMATERNO,
                APELLIDOPATERNO,
                NOMBRE,
                CORREO,
                ESTADO,
                TIPODOCUMENTO,
                NUMERODOCUMENTO,
                TELEFONO,
                FECHA_CAMBIO_CLAVE,
                FECHA_LOGIN,
                MAC,
        AUD_FEC_CREAC,
        AUD_USU_CREAC)
            VALUES(
                IS_ID_EMPRESA,
                SEQ_USUARIO.NEXTVAL,
                IS_USUARIO,
                IS_CONTRASENA,
                IS_APELLIDOMATERNO,
                IS_APELLIDOPATERNO,
                IS_NOMBRE,
                IS_CORREO,
                IS_ESTADO,
                IS_TIPODOCUMENTO,
                IS_NUMERODOCUMENTO,
                IS_TELEFONO,
                IS_FECHACAMBIOCLAVE,
                IS_FECHALOGIN,
                IS_MAC,
        SYSDATE,
        IS_USUARIO_AGR) RETURNING ID_USUARIO INTO OS_ID_USUARIO;             
    SELECT MNEMONICO INTO EMPRESA FROM TP_EMPRESA WHERE ID_EMPRESA = IS_ID_EMPRESA;
    INSERT INTO TP_BLOQUEO VALUES(IS_USUARIO, EMPRESA, SYSDATE, IS_ESTADO, 0);
    COMMIT;  
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Usuario registrado correctamente.';
ELSE
  OS_COD_RETORNO := '10';
  OS_MEN_RETORNO := 'El usuario ya existe';
END IF;


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
      
 
END;

PROCEDURE SPU_ACTUALIZAR_USUARIO(
IS_ID_USUARIO IN NUMBER,
IS_ID_EMPRESA IN NUMBER,
IS_USUARIO IN VARCHAR2,
--IS_CONTRASENA IN VARCHAR2,
--IS_APELLIDOMATERNO IN VARCHAR2,
IS_APELLIDOPATERNO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_CORREO IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_TIPODOCUMENTO IN VARCHAR2,
IS_NUMERODOCUMENTO IN VARCHAR2,
IS_TELEFONO IN VARCHAR2,
--IS_FECHACAMBIOCLAVE IN TIMESTAMP,
--IS_FECHALOGIN IN TIMESTAMP,
IS_MAC IN VARCHAR2,
IS_USUARIO_AGR     IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

)
IS

BEGIN

 UPDATE TP_USUARIO SET
                USUARIO = IS_USUARIO,
                --CONTRASENA = IS_CONTRASENA,
                APELLIDOPATERNO = IS_APELLIDOPATERNO,
                --APELLIDOMATERNO = IS_APELLIDOMATERNO,
                NOMBRE = IS_NOMBRE,
                CORREO = IS_CORREO,
                ESTADO = IS_ESTADO,
                TIPODOCUMENTO = IS_TIPODOCUMENTO,
                NUMERODOCUMENTO = IS_NUMERODOCUMENTO,
                TELEFONO = IS_TELEFONO,
                --FECHA_CAMBIO_CLAVE = IS_FECHACAMBIOCLAVE,
                --FECHA_LOGIN = IS_FECHALOGIN,
                MAC = IS_MAC,
        AUD_FEC_MODIF = SYSDATE,
        AUD_USU_MODIF = IS_USUARIO_AGR 
                WHERE ID_USUARIO=IS_ID_USUARIO;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Usuario actualizado correctamente.';


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPU_ACTUALIZAR_DATOS(
IS_ID_USUARIO IN NUMBER,
IS_ID_EMPRESA IN NUMBER,
IS_USUARIO IN VARCHAR2,
IS_CONTRASENA IN VARCHAR2,
IS_APELLIDOMATERNO IN VARCHAR2,
IS_APELLIDOPATERNO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_CORREO IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_TIPODOCUMENTO IN VARCHAR2,
IS_NUMERODOCUMENTO IN VARCHAR2,
IS_TELEFONO IN VARCHAR2,
IS_FECHACAMBIOCLAVE IN TIMESTAMP,
IS_FECHALOGIN IN TIMESTAMP,
IS_MAC IN VARCHAR2,
IS_FECHAMODIFICACION IN TIMESTAMP,
IS_USUARIOMODIFICACION IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

)
IS

BEGIN

 UPDATE TP_USUARIO SET
                USUARIO = IS_USUARIO,
                CONTRASENA = IS_CONTRASENA,
                APELLIDOPATERNO = IS_APELLIDOPATERNO,
                --APELLIDOMATERNO = IS_APELLIDOMATERNO,
                NOMBRE = IS_NOMBRE,
                CORREO = IS_CORREO,
                ESTADO = IS_ESTADO,
                TIPODOCUMENTO = IS_TIPODOCUMENTO,
                NUMERODOCUMENTO = IS_NUMERODOCUMENTO,
                TELEFONO = IS_TELEFONO,
                FECHA_CAMBIO_CLAVE = IS_FECHACAMBIOCLAVE,
                --FECHA_LOGIN = IS_FECHALOGIN,
                MAC = IS_MAC,
                AUD_FEC_MODIF =IS_FECHAMODIFICACION  ,
                AUD_USU_MODIF= IS_USUARIOMODIFICACION  
                WHERE ID_USUARIO=IS_ID_USUARIO;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Usuario actualizado correctamente.';


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPD_ELIMINAR_USUARIO(
IS_ID_USUARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
)
IS

BEGIN

 DELETE TP_BLOQUEO WHERE USUARIO = (SELECT USUARIO FROM TP_USUARIO WHERE ID_USUARIO = IS_ID_USUARIO);
 DELETE TR_ROL_X_USUARIO WHERE ID_USUARIO = IS_ID_USUARIO;
 DELETE TP_USUARIO WHERE ID_USUARIO=IS_ID_USUARIO;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Usuario eliminado correctamente.';


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_USUARIO(
IS_COD_USUARIO        IN NUMBER,
IS_USUARIO            IN VARCHAR2,
OS_COD_RETORNO        OUT VARCHAR2,
OS_MEN_RETORNO        OUT VARCHAR2,
OS_CURSOR             OUT T_CURSOR
)
IS
V_CURSOR      T_CURSOR;
T_QUERY       VARCHAR2(1000);
BEGIN
   
  T_QUERY := ' SELECT e.ID_EMPRESA,e.MNEMONICO AS EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,u.NOMBRE,APELLIDOPATERNO, ' ||
             ' APELLIDOMATERNO,CORREO,u.ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,' ||
             ' FECHA_CAMBIO_CLAVE,FECHA_LOGIN,MAC ' ||
             ' FROM TP_USUARIO u LEFT JOIN TP_EMPRESA e ON u.ID_EMPRESA=e.ID_EMPRESA ' ||
             ' WHERE 1=1';
             
   IF IS_COD_USUARIO != -1 THEN
     T_QUERY := T_QUERY || ' AND ID_USUARIO=' || IS_COD_USUARIO;
   END IF;
 
   IF IS_USUARIO IS NOT NULL THEN
     T_QUERY := T_QUERY || ' AND USUARIO LIKE ''' || IS_USUARIO || '%''';
   END IF;
      
   OPEN OS_CURSOR FOR T_QUERY;
      
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;



PROCEDURE SPS_CONSULTAR_USUARIO_LOGIN(
IS_USUARIO            IN VARCHAR2,
OS_COD_RETORNO        OUT VARCHAR2,
OS_MEN_RETORNO        OUT VARCHAR2,
OS_CURSOR             OUT T_CURSOR
)
IS
V_CURSOR      T_CURSOR;
T_QUERY       VARCHAR2(1000);
BEGIN
    OPEN V_CURSOR FOR
    SELECT u.ID_EMPRESA,e.MNEMONICO AS EMPRESA,ID_USUARIO,USUARIO,CONTRASENA,u.NOMBRE,APELLIDOPATERNO, 
             APELLIDOMATERNO,CORREO,u.ESTADO,TIPODOCUMENTO,NUMERODOCUMENTO,TELEFONO,
             NVL(TO_CHAR(FECHA_CAMBIO_CLAVE,'YYYY-MM-DD HH24:MI:SS'),' ') AS FECHA_CAMBIO_CLAVE,   
             NVL(TO_CHAR(FECHA_LOGIN,'YYYY-MM-DD HH24:MI:SS'),' ') AS FECHA_LOGIN,   
             NVL(TO_CHAR(u.AUD_FEC_CREAC,'YYYY-MM-DD HH24:MI:SS'),' ') AS AUD_FEC_CREAC, MAC 
             FROM TP_USUARIO u LEFT JOIN TP_EMPRESA e ON u.ID_EMPRESA=e.ID_EMPRESA 
             WHERE 1=1 AND USUARIO = IS_USUARIO ;
      
   OS_CURSOR:=  V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_USUARIO_TODOS(
IS_ID_EMPRESA          IN NUMBER,
IS_NOMBRE              IN VARCHAR2,
IS_APELLIDO            IN VARCHAR2,
IS_ESTADO              IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
) 

IS
T_QUERY VARCHAR2(1500);

BEGIN
   T_QUERY := 'SELECT U.ID_USUARIO, U.USUARIO, U.NOMBRE, U.APELLIDOPATERNO, U.ESTADO, U.TIPODOCUMENTO, U.NUMERODOCUMENTO, EM.NOMBRE AS EMPRESA ' ||
              'FROM TP_USUARIO U INNER JOIN TP_EMPRESA EM ON U.ID_EMPRESA=EM.ID_EMPRESA WHERE 1=1';
   
   IF IS_ID_EMPRESA > 0 THEN
    T_QUERY:= T_QUERY || ' AND U.ID_EMPRESA = ' || IS_ID_EMPRESA;
   END IF;
   
   IF TRIM(IS_NOMBRE) IS NOT NULL THEN
    T_QUERY:= T_QUERY || ' AND U.NOMBRE LIKE ''' || IS_NOMBRE || '%''';
   END IF;
   
   IF TRIM(IS_APELLIDO) IS NOT NULL THEN
    T_QUERY:= T_QUERY || ' AND U.APELLIDOPATERNO LIKE ''' || IS_APELLIDO || '%''';
   END IF;
   
   IF (TRIM(IS_ESTADO) IS NOT NULL) AND (IS_ESTADO <> '-1') THEN
    T_QUERY:= T_QUERY || ' AND U.ESTADO = ''' || IS_ESTADO || '''';
   END IF;
              
   OPEN OS_CURSOR FOR T_QUERY;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_ROL_POR_USUARIO(
IS_USUARIO          IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;
T_QUERY  VARCHAR2(500);

BEGIN
   OPEN V_CURSOR FOR SELECT R.ID_ROL AS CODIGO,R.MNEMONICO AS NOMBRE ,R.ESTADO
          FROM TP_ROL R
          WHERE R.ID_ROL IN (SELECT RU.ID_ROL FROM TR_ROL_X_USUARIO RU WHERE RU.ID_USUARIO=IS_USUARIO );
      

   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_PERM_POR_USUARIO(
IS_USUARIO          IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;
T_QUERY  VARCHAR2(300);

BEGIN
   OPEN V_CURSOR FOR SELECT P.MNEMONICO,P.ID_PERMISO
              FROM TP_PERMISO P
              WHERE P.ID_PERMISO IN 
              (SELECT PR.ID_PERMISO FROM TR_PERMISO_X_ROL PR
              WHERE PR.ID_ROL IN (SELECT RU.ID_ROL FROM TR_ROL_X_USUARIO RU WHERE RU.ID_USUARIO=IS_USUARIO ) );
      

   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;



PROCEDURE SPS_VERI_SUPER_USUARIO(
IS_USUARIO        IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;
T_QUERY  VARCHAR2(300);

BEGIN
   OPEN V_CURSOR FOR 
   SELECT U.ID_EMPRESA, (SELECT E.MNEMONICO FROM TP_EMPRESA E WHERE E.ID_EMPRESA = U.ID_EMPRESA) MNEMONICO--, 
    FROM TP_USUARIO U 
    WHERE U.ID_USUARIO=IS_USUARIO;

   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;



PROCEDURE SPS_CONSULTAR_USU_DES_BLO(
  IS_ID_EMPRESA          IN VARCHAR2,
  IS_NOMBRE              IN VARCHAR2, 
  IS_ESTADO              IN VARCHAR2,
  OS_COD_RETORNO         OUT VARCHAR2,
  OS_MEN_RETORNO         OUT VARCHAR2,
  OS_CURSOR              OUT T_CURSOR
)
IS
  T_QUERY VARCHAR2(1000);
BEGIN

  T_QUERY := 'SELECT U.ID_USUARIO, U.NOMBRE, U.APELLIDOPATERNO AS APELLIDO, U.TIPODOCUMENTO || '' '' || U.NUMERODOCUMENTO AS DOCUMENTO, U.USUARIO, E.NOMBRE AS EMPRESA
              FROM TP_USUARIO U INNER JOIN TP_EMPRESA E ON U.ID_EMPRESA = E.ID_EMPRESA WHERE 1=1';
  
  IF IS_ESTADO = 'BLOQUEADO' THEN
    T_QUERY := T_QUERY || ' AND U.ESTADO <> ''' || IS_ESTADO || '''';
  ELSIF IS_ESTADO = 'HABILITADO' THEN
    T_QUERY := T_QUERY || ' AND U.ESTADO = ''BLOQUEADO''';
  END IF;
  
  IF IS_ID_EMPRESA <> '-1' THEN
    T_QUERY := T_QUERY || ' AND E.ID_EMPRESA = ' || IS_ID_EMPRESA;
  END IF;
  
  IF IS_NOMBRE IS NOT NULL THEN
    T_QUERY := T_QUERY || ' AND U.NOMBRE LIKE ''' || IS_NOMBRE || '%''';
  END IF;

  OPEN OS_CURSOR FOR T_QUERY;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPU_REGISTRAR_USU_DES_BLO(
  IS_USUARIOS          IN VARCHAR2,
  IS_USUARIO       IN VARCHAR2,
  IS_ESTADO              IN VARCHAR2,
  OS_COD_RETORNO         OUT VARCHAR2,
  OS_MEN_RETORNO         OUT VARCHAR2,
  OS_CURSOR              OUT T_CURSOR
)
IS
  T_QUERY VARCHAR2(1000);
  T_USUARIO NUMBER;
  COND_MIN  NUMBER;
  COND_MAX  NUMBER;
  ITERA     NUMBER; 
BEGIN 
  COND_MIN  := 1;
  COND_MAX  := 1;
  ITERA     := 1;  
  LOOP
    T_USUARIO := TO_NUMBER(GET_TOKEN(IS_USUARIOS, ITERA));
    ITERA := ITERA + 1;
    IF T_USUARIO IS NOT NULL THEN 
      UPDATE TP_USUARIO SET ESTADO = IS_ESTADO, AUD_FEC_MODIF = SYSDATE, AUD_USU_MODIF = IS_USUARIO WHERE ID_USUARIO = T_USUARIO;
    END IF;
    
    EXIT WHEN T_USUARIO IS NULL;
  END LOOP;
  COMMIT;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;



/*
==========================
STORE PROCEDURE DE APLICACION
===========================*/

PROCEDURE SPS_CONSULTAR_APLICACIONES_USU(
  IS_ID_EMPRESA IN VARCHAR2,
  OS_COD_RETORNO         OUT VARCHAR2,
  OS_MEN_RETORNO         OUT VARCHAR2,
  OS_CURSOR               OUT T_CURSOR
)
IS
BEGIN
  
  IF IS_ID_EMPRESA <> '-1' THEN 
    OPEN OS_CURSOR FOR SELECT ID_APLICACION AS CODIGO, NOMBRE FROM TP_APLICACION WHERE ID_EMPRESA = TO_NUMBER(IS_ID_EMPRESA);
  END IF;
    
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Empresa registrada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
  
END;

PROCEDURE SPS_CONSULTAR_APLICACION_DATA(
  IS_TIPO IN NUMBER,
  OS_COD_RETORNO         OUT VARCHAR2,
  OS_MEN_RETORNO         OUT VARCHAR2,
  OS_CURSOR               OUT T_CURSOR
)
IS
BEGIN
  IF IS_TIPO = 1 THEN
     OPEN OS_CURSOR FOR SELECT ID_APLICACION AS CODIGO, NOMBRE FROM TP_APLICACION;
  ELSE
    OPEN OS_CURSOR FOR SELECT MNEMONICO AS CODIGO, NOMBRE FROM TP_APLICACION;
  END IF;
  
 
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Empresa registrada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
  
END;

PROCEDURE SPI_REGISTRAR_APLICACION(
IS_ID_EMPRESA IN NUMBER,
IS_MNEMONICO IN VARCHAR2,
IS_NOMBRE IN VARCHAR2,
IS_DESCRIPCION IN VARCHAR2,
IS_ESTADO IN VARCHAR2,
IS_POLITICA IN VARCHAR2,
IS_USUARIO  IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_COD_ID_APLICACION     OUT NUMBER
)
IS
 CONT NUMBER;
BEGIN
  
  SELECT COUNT(1) INTO CONT FROM TP_APLICACION WHERE MNEMONICO = IS_MNEMONICO AND ID_EMPRESA = IS_ID_EMPRESA;

IF CONT = 0 THEN
 INSERT INTO TP_APLICACION(
                ID_EMPRESA,
                ID_APLICACION,
                MNEMONICO,
                NOMBRE,
                DESCRIPCION,
                ESTADO,
                POLITICA_ACTIVA,
        AUD_FEC_CREAC,
        AUD_USU_CREAC
                )
            VALUES(
                IS_ID_EMPRESA,
                SEQ_APLICACION.NEXTVAL,
                IS_MNEMONICO,
                IS_NOMBRE,
                IS_DESCRIPCION,
                IS_ESTADO, '0',
        SYSDATE, IS_USUARIO) RETURNING ID_APLICACION INTO OS_COD_ID_APLICACION;             
                
  INSERT INTO TS_ATRIBUTO_APLICACION (SELECT ID_POLITICA, ID_ATRIBUTO, IS_MNEMONICO, VALOR, IS_ID_EMPRESA FROM TS_ATRIBUTO_EMPRESA
                                      WHERE EMPRESA = (SELECT MNEMONICO FROM TP_EMPRESA WHERE ID_EMPRESA = IS_ID_EMPRESA));
                
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Aplicacion registrada correctamente.';
ELSE
  OS_COD_RETORNO := '10';
  OS_MEN_RETORNO := 'La Aplicacion ya existe';
END IF;

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
      
 
END;

PROCEDURE SPU_ACTIVAR_POLITICA(
IS_ID_APLICACION   IN NUMBER,
IS_ESTADO       IN VARCHAR2,
IS_USUARIO       IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
)
IS

BEGIN 
  UPDATE TP_APLICACION SET POLITICA_ACTIVA = IS_ESTADO, AUD_FEC_MODIF = SYSDATE, AUD_USU_MODIF = IS_USUARIO WHERE ID_APLICACION = IS_ID_APLICACION;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Aplicación actualizada correctamente.';


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;
 

PROCEDURE SPU_ACTUALIZAR_APLICACION(
IS_ID_APLICACION   IN NUMBER,
IS_NOMBRE       IN VARCHAR2,
IS_DESCRIPCION     IN VARCHAR2,
IS_ESTADO       IN VARCHAR,
IS_POLITICA     IN VARCHAR,
IS_USUARIO       IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
)
IS

BEGIN

 UPDATE TP_APLICACION SET NOMBRE = IS_NOMBRE,
                          DESCRIPCION = IS_DESCRIPCION,
                          ESTADO = ESTADO,  
                          AUD_FEC_MODIF = SYSDATE, AUD_USU_MODIF = IS_USUARIO WHERE ID_APLICACION=IS_ID_APLICACION;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Aplicación actualizada correctamente.';


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPD_ELIMINAR_APLICACION(
IS_ID_APLICACION IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

)
IS
  IS_EMPRESA NUMBER;
  EX_NO_DELETE exception;
  pragma exception_init (EX_NO_DELETE,-02292);
BEGIN
  SELECT ID_EMPRESA INTO IS_EMPRESA FROM TP_APLICACION WHERE ID_APLICACION = IS_ID_APLICACION;
  DELETE TS_ATRIBUTO_APLICACION WHERE ID_EMPRESA = IS_EMPRESA AND APLICACION = (SELECT MNEMONICO FROM TP_APLICACION WHERE ID_APLICACION = IS_ID_APLICACION);
  DELETE TP_APLICACION WHERE ID_APLICACION=IS_ID_APLICACION;    

  COMMIT;
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Aplicación eliminada correctamente.';


 EXCEPTION
    WHEN EX_NO_DELETE THEN
    OS_COD_RETORNO := '30';
    OS_MEN_RETORNO := 'La aplicacinull;n no puede ser eliminada, porque se encuentra asociada a un Rol y/o Permiso';
 
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_APP_EMP(
IS_APLICACION        IN VARCHAR2,
IS_EMPRESA    IN VARCHAR2,
OS_COD_RETORNO          OUT VARCHAR2,
OS_MEN_RETORNO          OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;
 
BEGIN
    
  OPEN V_CURSOR FOR 
  SELECT ap.ID_EMPRESA,ap.ID_APLICACION,ap.MNEMONICO,ap.NOMBRE,ap.DESCRIPCION,ap.ESTADO FROM TP_APLICACION ap INNER JOIN TP_EMPRESA e
  ON ap.ID_EMPRESA= e.ID_EMPRESA 
  WHERE  ap.MNEMONICO = IS_APLICACION 
  AND e.MNEMONICO = IS_EMPRESA;
  
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_APLICACION(
IS_ID_APLICACION        IN NUMBER,
OS_COD_RETORNO          OUT VARCHAR2,
OS_MEN_RETORNO          OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;
 
BEGIN
   T_QUERY := ' SELECT AP.ID_APLICACION, AP.MNEMONICO, AP.NOMBRE, AP.DESCRIPCION, AP.ESTADO,  EM.ID_EMPRESA, EM.NOMBRE AS EMPRESA, AP.POLITICA_ACTIVA' ||
              ' FROM TP_APLICACION AP INNER JOIN TP_EMPRESA EM ON AP.ID_EMPRESA = EM.ID_EMPRESA ' ||
              ' WHERE AP.ID_APLICACION ='|| IS_ID_APLICACION;
   
   OPEN OS_CURSOR FOR T_QUERY;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_APLICACION_TODAS(
IS_ID_EMPRESA          IN NUMBER,
IS_NOMBRE              IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);

BEGIN
  
   T_QUERY := 'SELECT AP.ID_APLICACION, AP.MNEMONICO, AP.NOMBRE, AP.DESCRIPCION, AP.ESTADO, EM.NOMBRE AS EMPRESA, AP.POLITICA_ACTIVA ' ||
              'FROM TP_APLICACION AP INNER JOIN TP_EMPRESA EM ON AP.ID_EMPRESA = EM.ID_EMPRESA WHERE 1=1';

   IF IS_ID_EMPRESA > -1 THEN
      T_QUERY := T_QUERY || ' AND AP.ID_EMPRESA='||IS_ID_EMPRESA;             
   END IF;
  
   IF IS_NOMBRE IS NOT NULL THEN
      T_QUERY := T_QUERY || ' AND AP.NOMBRE LIKE ''' || IS_NOMBRE || '%''';             
   END IF;
   
   OPEN OS_CURSOR FOR T_QUERY;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;



PROCEDURE SPS_REG_ROLES_USER_APP(
IS_ROLES               IN VARCHAR2,
IS_APLICACION          IN NUMBER,
IS_USUARIO             IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
)
IS
ITERA        NUMBER;
COND_MAX     NUMBER;
COND_MIN     NUMBER;
T_ROL        VARCHAR2(50);
BEGIN
  DELETE TR_ROL_X_USUARIO WHERE ID_ROL IN (SELECT RO.ID_ROL FROM TP_ROL RO 
                                           INNER JOIN TP_APLICACION APP ON RO.ID_APLICACION = APP.ID_APLICACION 
                                           INNER JOIN TR_ROL_X_USUARIO RU ON RU.ID_ROL = RO.ID_ROL
                                           WHERE APP.ID_APLICACION = IS_APLICACION AND RU.ID_USUARIO=IS_USUARIO);
  COND_MIN  := 1;
  COND_MAX  := 1;
  ITERA     := 1;  
  LOOP
    T_ROL := GET_TOKEN(IS_ROLES, ITERA);
    ITERA := ITERA + 1;
    IF T_ROL IS NOT NULL THEN 
      INSERT INTO TR_ROL_X_USUARIO VALUES (IS_USUARIO, T_ROL);
    END IF;
    
    EXIT WHEN T_ROL IS NULL;
  END LOOP;
  COMMIT;
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;


PROCEDURE SPS_CONSULTAR_APLICACION_EMP(
  IS_ID_EMPRESA           IN VARCHAR2,
  OS_COD_RETORNO          OUT VARCHAR2,
  OS_MEN_RETORNO          OUT VARCHAR2,
  OS_CURSOR               OUT T_CURSOR
)
IS
BEGIN
  OPEN OS_CURSOR FOR SELECT ID_APLICACION AS CODIGO, NOMBRE FROM TP_APLICACION WHERE ID_EMPRESA = IS_ID_EMPRESA ;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Empresa registrada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
  
END;


PROCEDURE SPS_CONSULTAR_PICKDATA_ROLES(
IS_APLICACION          IN NUMBER,
IS_USUARIO             IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;
T_QUERY  VARCHAR2(300);
BEGIN
   
           OPEN V_CURSOR FOR SELECT RO.ID_ROL AS CODIGO, RO.NOMBRE AS ROL, 'FALSE' AS SELECCION FROM TP_ROL RO
                     INNER JOIN TP_APLICACION AP ON RO.ID_APLICACION = AP.ID_APLICACION 
                     WHERE AP.ID_APLICACION = IS_APLICACION AND RO.ID_ROL NOT IN ( 
                                                  SELECT RO.ID_ROL FROM TP_ROL RO 
                                                  INNER JOIN TP_APLICACION APP ON RO.ID_APLICACION = APP.ID_APLICACION 
                                                  INNER JOIN TR_ROL_X_USUARIO RU ON RU.ID_ROL = RO.ID_ROL
                                                  WHERE APP.ID_APLICACION = IS_APLICACION AND RU.ID_USUARIO=IS_USUARIO)
                      UNION 
                      SELECT RO.ID_ROL AS CODIGO, RO.NOMBRE AS ROL, 'TRUE' AS SELECCION FROM TP_ROL RO 
                      INNER JOIN TP_APLICACION APP ON RO.ID_APLICACION = APP.ID_APLICACION 
                      INNER JOIN TR_ROL_X_USUARIO RU ON RU.ID_ROL = RO.ID_ROL
                      WHERE APP.ID_APLICACION = IS_APLICACION AND RU.ID_USUARIO = IS_USUARIO;
                     
                             
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_REG_PERM_ROL_APP(
IS_PERMISOS               IN VARCHAR2,
IS_ROL             IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
)
IS
ITERA        NUMBER;
COND_MAX     NUMBER;
COND_MIN     NUMBER;
T_PERMISO        VARCHAR2(50);
BEGIN
  DELETE FROM TR_PERMISO_X_ROL WHERE ID_ROL = IS_ROL;
  COND_MIN  := 1;
  COND_MAX  := 1;
  ITERA     := 1;  
  LOOP
    T_PERMISO := GET_TOKEN(IS_PERMISOS, ITERA);
    ITERA := ITERA + 1;
    IF T_PERMISO IS NOT NULL THEN 
      INSERT INTO TR_PERMISO_X_ROL VALUES (IS_ROL, T_PERMISO);
    END IF;
    
    EXIT WHEN T_PERMISO IS NULL;
  END LOOP;
  COMMIT;
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;



PROCEDURE SPS_REG_ROL_X_ROL_APP(
IS_ROLES               IN VARCHAR2,
IS_ROL             IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
)
IS
ITERA        NUMBER;
COND_MAX     NUMBER;
COND_MIN     NUMBER;
T_ROL        VARCHAR2(50);
BEGIN
  DELETE FROM TR_ROLES_X_ROL WHERE ID_ROL = IS_ROL;
  COND_MIN  := 1;
  COND_MAX  := 1;
  ITERA     := 1;  
  LOOP
    T_ROL := GET_TOKEN(IS_ROLES, ITERA);
    ITERA := ITERA + 1;
    IF T_ROL IS NOT NULL THEN 
      INSERT INTO TR_ROLES_X_ROL VALUES (T_ROL,IS_ROL);
    END IF;
    
    EXIT WHEN T_ROL IS NULL;
  END LOOP;
  COMMIT;
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;


/*
==========================
STORE PROCEDURE DE ROL
===========================*/

PROCEDURE SPI_REGISTRAR_ROL(
IS_ID_APLICACION NUMBER,
IS_MNEMONICO   IN VARCHAR2,
IS_NOMBRE     IN VARCHAR2,
IS_DESCRIPCION   IN VARCHAR2,
IS_ESTADO     IN VARCHAR2,
IS_USUARIO     IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_COD_ROL          OUT NUMBER,
OS_EMPRESA          OUT VARCHAR2


)
IS
CONTADOR NUMBER := 0;

BEGIN
  
   SELECT COUNT(*) INTO CONTADOR FROM TP_ROL 
          WHERE MNEMONICO = IS_MNEMONICO
          AND ID_APLICACION = IS_ID_APLICACION;
   
   IF CONTADOR = 0 THEN 
   SELECT SEQ_ROL.NEXTVAL INTO OS_COD_ROL FROM DUAL;
   
     INSERT INTO TP_ROL(
                  ID_APLICACION,
                  ID_ROL,
                  MNEMONICO,
                  NOMBRE,
                  DESCRIPCION,
                  ESTADO,
          AUD_FEC_CREAC,
          AUD_USU_CREAC
                  )
              VALUES(
                  IS_ID_APLICACION,
                  OS_COD_ROL,

                  IS_MNEMONICO,
                  IS_NOMBRE,
                  IS_DESCRIPCION,
                  IS_ESTADO,
          SYSDATE,
          IS_USUARIO
          );
          
                        

      COMMIT;
      
      OS_EMPRESA:=FUN_EMPRESA_X_APLICACION(IS_ID_APLICACION);
      OS_COD_RETORNO := '00';
      OS_MEN_RETORNO := 'Rol registrado correctamente.';
   
      ELSE 
      OS_COD_RETORNO := '10';
      OS_MEN_RETORNO := 'El codigo de rol ya existe.';
   END IF;



 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
      
 
END;

PROCEDURE SPU_ACTUALIZAR_ROL(
IS_ID_ROL       IN NUMBER,
IS_NOMBRE       IN VARCHAR2,
IS_MNEMONICO     IN VARCHAR2,
IS_DESCRIPCION     IN VARCHAR2,
IS_ESTADO       IN VARCHAR2,
IS_USUARIO      IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2,
OS_EMPRESA      OUT VARCHAR2
)
IS
CONTADOR NUMBER := 0;
BEGIN
  
         UPDATE TP_ROL SET
                    NOMBRE = IS_NOMBRE,
                    DESCRIPCION = IS_DESCRIPCION,        
                    ESTADO = IS_ESTADO, 
          AUD_FEC_MODIF = SYSDATE,
          AUD_USU_MODIF = IS_USUARIO 
          WHERE ID_ROL= IS_ID_ROL;  
                             
        COMMIT;
         OS_MEN_RETORNO := 'Rol ha actualizado correctamente.';
         OS_COD_RETORNO := '00';
      
 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPD_ELIMINAR_ROL(
IS_ID_ROL IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
)
IS
ROL_ASOC NUMBER;

BEGIN
  SELECT COUNT(*) INTO ROL_ASOC
  FROM (SELECT 'FALSE' AS ROL_ELI FROM TR_ROLES_X_ROL TR
    WHERE TR.ID_ROL_PADRE = IS_ID_ROL OR
    TR.ID_ROL = IS_ID_ROL
  UNION ALL  
  SELECT 'FALSE' AS ROL_ELI FROM TR_ROL_X_USUARIO TU
    WHERE TU.ID_ROL = IS_ID_ROL);

IF ROL_ASOC = 0 THEN
   DELETE TP_ROL WHERE ID_ROL= IS_ID_ROL;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Rol eliminado correctamente.';
ELSE
    OS_COD_RETORNO := '30';
    OS_MEN_RETORNO := 'El rol no puede ser eliminado porque se encuentra asociado a otro rol o a un usuario';
END IF;


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_ROL(
IS_ROL IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;

BEGIN

   T_QUERY := ' SELECT R.ID_ROL,R.MNEMONICO, R.NOMBRE NOMBRE, 
                R.DESCRIPCION, R.ESTADO, AP.ID_APLICACION, E.ID_EMPRESA
                FROM TP_ROL R JOIN TP_APLICACION AP ON R.ID_APLICACION = AP.ID_APLICACION
                JOIN TP_EMPRESA E ON E.ID_EMPRESA = AP.ID_EMPRESA
                WHERE R.ID_ROL =  '||IS_ROL; 
                
   OPEN V_CURSOR FOR T_QUERY;
   OS_CURSOR := V_CURSOR;
   
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_ROL_TODAS(
IS_ROL IN VARCHAR2,
IS_ID_EMPRESA IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;
T_CONCAT_WHERE VARCHAR(300);


BEGIN
  IF IS_ROL IS NOT NULL THEN
      T_CONCAT_WHERE := ' AND UPPER(R.NOMBRE) LIKE UPPER(''%'|| IS_ROL||'%'')';
   END IF;
   
   IF IS_ID_APLICACION IS NOT NULL THEN
      T_CONCAT_WHERE := T_CONCAT_WHERE||' AND R.ID_APLICACION='||IS_ID_APLICACION;
   END IF;
   
   IF IS_ID_EMPRESA IS NOT NULL THEN
      T_CONCAT_WHERE := T_CONCAT_WHERE|| ' AND AP.ID_APLICACION IN (SELECT A.ID_APLICACION FROM TP_APLICACION A WHERE A.ID_EMPRESA = '||IS_ID_EMPRESA||') ';
   END IF;
   T_QUERY := ' SELECT R.ID_ROL,R.MNEMONICO, R.NOMBRE R_NOMBRE, 
                R.DESCRIPCION, R.ESTADO, AP.ID_APLICACION, AP.NOMBRE A_NOMBRE, E.ID_EMPRESA, E.NOMBRE E_NOMBRE
                FROM TP_ROL R JOIN TP_APLICACION AP ON R.ID_APLICACION = AP.ID_APLICACION
                JOIN TP_EMPRESA E ON E.ID_EMPRESA = AP.ID_EMPRESA
                WHERE 1=1 '||T_CONCAT_WHERE; 
                
    
   OPEN V_CURSOR FOR T_QUERY;
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';
    ROLLBACK;

 EXCEPTION
    WHEN OTHERS THEN
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_ROLES(
IS_USUARIO IN VARCHAR2,
IS_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   
   OPEN V_CURSOR FOR
     SELECT p.MNEMONICO AS ROL FROM TP_APLICACION ap, TP_ROL p, TR_ROL_X_USUARIO ru, TP_USUARIO u
   WHERE ap.ID_APLICACION=p.ID_APLICACION
   AND p.ID_ROL=ru.ID_ROL
   AND ru.ID_USUARIO=u.ID_USUARIO
   AND u.USUARIO=IS_USUARIO
   AND ap.MNEMONICO=IS_APLICACION;
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_ROL_APLI_DATA(
IS_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   
   OPEN V_CURSOR FOR
   SELECT ID_ROL AS CODIGO, NOMBRE
   FROM TP_ROL
   WHERE ID_APLICACION =IS_APLICACION;
  
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_ROL_DATA(
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   
   OPEN V_CURSOR FOR
   SELECT ID_ROL AS CODIGO, NOMBRE
   FROM TP_ROL;
   
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_PERMISO_DATA(
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   
   OPEN V_CURSOR FOR
   SELECT ID_PERMISO AS CODIGO, NOMBRE
   FROM TP_PERMISO;
   
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_ROL_PADRES(
IS_ROL IN NUMBER,
IS_APLICACION IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   
   OPEN V_CURSOR FOR
   SELECT R.ID_ROL AS CODIGO, R.NOMBRE, 'TRUE' SELECCION
    FROM TP_ROL R 
    WHERE R.ID_ROL IN (SELECT RR.ID_ROL_PADRE FROM TR_ROLES_X_ROL RR WHERE RR.ID_ROL = IS_ROL )
    AND ID_APLICACION = IS_APLICACION
    UNION
    SELECT R.ID_ROL AS CODIGO, R.NOMBRE, 'FALSE' SELECCION
    FROM TP_ROL R 
    WHERE R.ID_ROL NOT IN (SELECT RR.ID_ROL_PADRE FROM TR_ROLES_X_ROL RR WHERE RR.ID_ROL = IS_ROL )
    AND R.ID_ROL NOT IN (SELECT RR.ID_ROL FROM TR_ROLES_X_ROL RR WHERE RR.ID_ROL_PADRE = IS_ROL)
    AND R.ID_ROL <> IS_ROL
    AND ID_APLICACION = IS_APLICACION;

   
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;



/*
==========================
STORE PROCEDURE DE PERMISO
===========================*/

PROCEDURE SPI_REGISTRAR_PERMISO(
IS_ID_APLICACION   NUMBER,
IS_MNEMONICO     IN VARCHAR2,
IS_NOMBRE       IN VARCHAR2,
IS_DESCRIPCION     IN VARCHAR2,
IS_ESTADO       IN VARCHAR2,
IS_TIPO       IN VARCHAR2,
IS_USUARIO       IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2,
OS_COD_ID_PERMISO   OUT NUMBER
)
IS
CONT NUMBER;
BEGIN

SELECT COUNT(1) INTO CONT FROM TP_PERMISO WHERE MNEMONICO = IS_MNEMONICO AND ID_APLICACION = IS_ID_APLICACION;
 
IF CONT = 0 THEN 
 
 INSERT INTO TP_PERMISO(
                ID_APLICACION,
                ID_PERMISO,
                MNEMONICO,
                NOMBRE,
                DESCRIPCION,
                ESTADO,
                TIPO,
        AUD_FEC_CREAC,
        AUD_USU_CREAC
                )
            VALUES(
                IS_ID_APLICACION,
                SEQ_PERMISO.NEXTVAL,
                IS_MNEMONICO,
                IS_NOMBRE,    
                IS_DESCRIPCION,
                IS_ESTADO,
                IS_TIPO,
        SYSDATE,
        IS_USUARIO) RETURNING ID_PERMISO INTO OS_COD_ID_PERMISO;
                
    COMMIT;                        
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Permiso registrado correctamente';

ELSE
  OS_COD_RETORNO := '10';
  OS_MEN_RETORNO := 'El Permiso ya existe';
END IF;


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;     
 
END;

PROCEDURE SPU_ACTUALIZAR_PERMISO(
IS_ID_PERMISO     IN NUMBER,
IS_NOMBRE       IN VARCHAR2,
IS_MNEMONICO     IN VARCHAR2,
IS_DESCRIPCION     IN VARCHAR2,
IS_ESTADO       IN VARCHAR2,
IS_TIPO       IN VARCHAR2,
IS_USUARIO       IN VARCHAR2,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
)
IS
CONTADOR NUMBER := 0;
BEGIN

    SELECT COUNT(*) INTO CONTADOR
    FROM TP_PERMISO WHERE MNEMONICO = IS_MNEMONICO;

    IF CONTADOR = 1 THEN 
 UPDATE TP_PERMISO SET
                NOMBRE = IS_NOMBRE,
                DESCRIPCION = IS_DESCRIPCION,
                TIPO=IS_TIPO,
                ESTADO = IS_ESTADO,
        AUD_FEC_MODIF = SYSDATE,
        AUD_USU_MODIF = IS_USUARIO 
        WHERE ID_PERMISO= IS_ID_PERMISO ;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Permiso actualizado correctamente.';

ELSE 
        OS_MEN_RETORNO := 'El codigo de rol ya existe.';
        OS_COD_RETORNO := '10';
        
END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPD_ELIMINAR_PERMISO(
IS_ID_PERMISO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

)
IS

BEGIN

 DELETE TP_PERMISO WHERE ID_PERMISO= IS_ID_PERMISO;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Rol eliminado correctamente.';


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_PERMISO(
IS_PERMISO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;

BEGIN
    T_QUERY := 'SELECT P.ID_PERMISO,P.MNEMONICO,P.NOMBRE AS P_NOMBRE,
        P.DESCRIPCION,P.ESTADO,P.TIPO, AP.ID_APLICACION, AP.NOMBRE A_NOMBRE,
        E.ID_EMPRESA, E.NOMBRE E_NOMBRE
        FROM TP_PERMISO P
        LEFT JOIN TP_APLICACION AP ON P.ID_APLICACION= AP.ID_APLICACION
        LEFT JOIN TP_EMPRESA E ON   AP.ID_EMPRESA= E.ID_EMPRESA
        WHERE P.ID_PERMISO = '||IS_PERMISO; 

        
   OPEN V_CURSOR FOR T_QUERY;
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_PERM_TODAS(
IS_PERMISO IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
IS_ID_EMPRESA IN VARCHAR2,
IS_TIPO_PERMISO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;
T_CONCAT_WHERE VARCHAR(300);

BEGIN

   IF TRIM(IS_PERMISO) IS NOT NULL THEN
      T_CONCAT_WHERE := ' AND UPPER(P.NOMBRE) LIKE UPPER(''%'|| IS_PERMISO||'%'')';
   END IF;
   
   IF (TRIM(IS_ID_APLICACION) IS NOT NULL) AND (IS_ID_APLICACION <> '-1')  THEN
      T_CONCAT_WHERE := T_CONCAT_WHERE||' AND AP.ID_APLICACION ='|| TO_NUMBER(IS_ID_APLICACION);
   END IF;
   
   IF (TRIM(IS_ID_EMPRESA) IS NOT NULL) AND (IS_ID_EMPRESA <> '-1')  THEN
      T_CONCAT_WHERE := T_CONCAT_WHERE||' AND E.ID_EMPRESA ='|| TO_NUMBER(IS_ID_EMPRESA);
   END IF;

   IF TRIM(IS_TIPO_PERMISO) IS NOT NULL THEN
      T_CONCAT_WHERE := T_CONCAT_WHERE || ' AND P.TIPO = '''|| IS_TIPO_PERMISO||'''';
   END IF;
   
   T_QUERY := 'SELECT P.ID_PERMISO,P.MNEMONICO,P.NOMBRE AS P_NOMBRE,
        P.DESCRIPCION,P.ESTADO,P.TIPO, AP.ID_APLICACION, AP.NOMBRE A_NOMBRE,
        E.ID_EMPRESA, E.NOMBRE E_NOMBRE
        FROM TP_PERMISO P
        INNER JOIN TP_APLICACION AP ON P.ID_APLICACION= AP.ID_APLICACION
        INNER JOIN TP_EMPRESA E ON   AP.ID_EMPRESA= E.ID_EMPRESA
        WHERE 1=1 '||T_CONCAT_WHERE;             
   OPEN V_CURSOR FOR T_QUERY;
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_PERMISO_TODAS(
IS_PERMISO IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;
T_CONCAT_WHERE VARCHAR(300);

BEGIN

   IF IS_PERMISO IS NOT NULL THEN
      T_CONCAT_WHERE := ' AND P.MNEMONICO LIKE ''%'|| IS_PERMISO||'%''';
   END IF;
   
   IF IS_ID_APLICACION IS NOT NULL THEN
      T_CONCAT_WHERE := T_CONCAT_WHERE||' AND P.ID_APLICACION='||IS_ID_APLICACION;
   END IF;


   T_QUERY := 'SELECT P.ID_PERMISO,P.MNEMONICO,P.NOMBRE AS P_NOMBRE,
        P.DESCRIPCION,P.ESTADO,P.TIPO, AP.ID_APLICACION, AP.NOMBRE A_NOMBRE,
        E.ID_EMPRESA, E.NOMBRE E_NOMBRE
        FROM TP_PERMISO P
        INNER JOIN TP_APLICACION AP ON P.ID_APLICACION= AP.ID_APLICACION
        INNER JOIN TP_EMPRESA E ON   AP.ID_APLICACION= E.ID_EMPRESA
        WHERE 1=1 '||T_CONCAT_WHERE;             
   OPEN V_CURSOR FOR T_QUERY;
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_PERMISOS(
IS_EMPRESA IN VARCHAR2,
IS_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   
   OPEN V_CURSOR FOR
   SELECT r.MNEMONICO as PERMISO FROM TP_PERMISO r,TP_APLICACION ap,TP_EMPRESA e 
   WHERE r.id_aplicacion=ap.id_aplicacion 
   AND ap.id_empresa=e.id_empresa 
   AND ap.MNEMONICO=IS_APLICACION
   AND e.MNEMONICO=IS_EMPRESA;
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_PERMISO_POR_ROL(
IS_ROL          IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;
T_QUERY  VARCHAR2(300);

BEGIN
   OPEN V_CURSOR FOR SELECT P.ID_PERMISO AS CODIGO, NOMBRE, 'TRUE' SELECCION
      FROM TP_PERMISO P
      WHERE P.ID_PERMISO IN ( SELECT ID_PERMISO FROM TR_PERMISO_X_ROL PR WHERE PR.ID_ROL = IS_ROL)
      AND P.ID_APLICACION = (SELECT ID_APLICACION FROM TP_ROL R WHERE R.ID_ROL = IS_ROL)
      UNION
      SELECT P.ID_PERMISO AS CODIGO, NOMBRE, 'FALSE' SELECCION
      FROM TP_PERMISO P
      WHERE P.ID_PERMISO NOT IN ( SELECT ID_PERMISO FROM TR_PERMISO_X_ROL PR WHERE PR.ID_ROL = IS_ROL)
      AND P.ID_APLICACION = (SELECT ID_APLICACION FROM TP_ROL R WHERE R.ID_ROL = IS_ROL);

   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

/*
==========================
STORE PROCEDURE DE POLITICA
===========================*/

PROCEDURE SPS_CONSULTAR_POLITICAS(
IS_OPCION         IN VARCHAR2,
IS_ID_EMPRESA     IN VARCHAR2,
OS_COD_RETORNO    OUT VARCHAR2,
OS_MEN_RETORNO    OUT VARCHAR2,
OS_CURSOR         OUT T_CURSOR
)
IS
   T_QUERY    VARCHAR2(500);
BEGIN 
    IF IS_OPCION = '0' THEN
        T_QUERY := 'SELECT DISTINCT EM.ID_EMPRESA, EM.MNEMONICO AS CODIGO, EM.NOMBRE AS EMPRESA, EM.DESCRIPCION ' ||
                   'FROM TP_EMPRESA EM INNER JOIN TS_ATRIBUTO_EMPRESA AE ON AE.EMPRESA = EM.MNEMONICO';
    END IF;
    
    IF IS_OPCION = '1' THEN
        T_QUERY := 'SELECT DISTINCT AP.ID_APLICACION AS ID_APLICACION, AP.MNEMONICO AS CODIGO, AP.NOMBRE AS APLICACION, ' ||
                   'AP.ESTADO, EM.ID_EMPRESA, EM.NOMBRE AS EMPRESA ' ||
                   'FROM TP_APLICACION AP INNER JOIN TS_ATRIBUTO_APLICACION AE ON AP.MNEMONICO = AE.APLICACION ' ||
                   'INNER JOIN TP_EMPRESA EM ON AP.ID_EMPRESA = EM.ID_EMPRESA ';
        IF (TRIM(IS_ID_EMPRESA) IS NOT NULL) AND (IS_ID_EMPRESA <> '-1') THEN
          T_QUERY := T_QUERY || ' WHERE EM.ID_EMPRESA =' || TO_NUMBER(IS_ID_EMPRESA);
        END IF;
    END IF;
    
   OPEN OS_CURSOR FOR T_QUERY; 
    
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;



PROCEDURE SPS_CONSULTAR_POLITICA(
IS_EVENTO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   OPEN V_CURSOR FOR 
      SELECT ID_POLITICA, EVENTO, CODIGO FROM TP_POLITICA WHERE EVENTO= IS_EVENTO ;       
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_POLITICA_X_EMP(
IS_ID_EMPRESA          IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   OPEN V_CURSOR FOR 
   SELECT * FROM TS_ATRIBUTO_EMPRESA WHERE EMPRESA= (SELECT MNEMONICO FROM TP_EMPRESA WHERE ID_EMPRESA = IS_ID_EMPRESA);
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION 
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_POLITICA_X_APLI(
IS_ID_EMPRESA    IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   OPEN V_CURSOR FOR 
   SELECT * FROM TS_ATRIBUTO_APLICACION WHERE APLICACION= (SELECT MNEMONICO FROM TP_APLICACION WHERE ID_APLICACION = IS_ID_APLICACION) 
   AND ID_EMPRESA = TO_NUMBER(IS_ID_EMPRESA);
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_ACTUALIZAR_POLITICA(
IS_ID_POLITICA IN VARCHAR2,
IS_ID_ATRIBUTO IN VARCHAR2,
IS_ID_EMPRESA  IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
IS_VALOR IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
)

IS
V_CURSOR T_CURSOR;

BEGIN

  UPDATE TS_ATRIBUTO_EMPRESA SET VALOR = IS_VALOR
                             WHERE ID_POLITICA = IS_ID_POLITICA
                             AND ID_ATRIBUTO = IS_ID_ATRIBUTO
                             AND EMPRESA = (SELECT MNEMONICO FROM TP_EMPRESA WHERE ID_EMPRESA = TO_NUMBER(IS_ID_EMPRESA));
                             
   COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Politica de empresa actualizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_ACTUALIZAR_POLITICA_APP(
IS_ID_POLITICA IN VARCHAR2,
IS_ID_ATRIBUTO IN VARCHAR2,
IS_ID_EMPRESA  IN VARCHAR2,
IS_ID_APLICACION IN VARCHAR2,
IS_VALOR IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2
) 

IS
V_CURSOR T_CURSOR;

BEGIN
  
  
  UPDATE TS_ATRIBUTO_APLICACION SET VALOR = IS_VALOR
                             WHERE ID_POLITICA = IS_ID_POLITICA
                             AND ID_ATRIBUTO = IS_ID_ATRIBUTO
                             AND APLICACION = (SELECT MNEMONICO FROM TP_APLICACION WHERE ID_APLICACION = IS_ID_APLICACION)
                             AND ID_EMPRESA = TO_NUMBER(IS_ID_EMPRESA);
                             
   COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Politica de empresa actualizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

/*
==========================
STORE PROCEDURE DE ATRIBUTO
===========================*/

PROCEDURE SPS_CONSULTAR_ATRIBUTO_EMPRESA(
IS_EMPRESA IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   OPEN V_CURSOR FOR
   SELECT ID_POLITICA, ID_ATRIBUTO, EMPRESA, VALOR  FROM TS_ATRIBUTO_EMPRESA WHERE EMPRESA= IS_EMPRESA ;            
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_ATRIBUTO_APP(
IS_APLICACION IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   OPEN V_CURSOR FOR
   SELECT ID_POLITICA, ID_ATRIBUTO, APLICACION, VALOR  FROM TS_ATRIBUTO_APLICACION WHERE APLICACION= IS_APLICACION ;             
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


/*
==========================
STORE PROCEDURE BLOQUEO
===========================*/


PROCEDURE SPI_REGISTRAR_BLOQUEO(
IS_USUARIO IN VARCHAR2,
IS_EMPRESA IN VARCHAR2,
IS_ESTADO IN VARCHAR2,
IS_FECHA IN TIMESTAMP,
IS_INTENTOSFALLIDOS IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2

)
IS
BEGIN
                
 INSERT INTO TP_BLOQUEO  (
         USUARIO,
         MNEMONICO_EMPRESA, 
         ESTADO,
         FECHA_ACTUALIZACION ,
         INTENTOS_FALLIDOS )
         VALUES(
         IS_USUARIO,
         IS_EMPRESA,
         IS_ESTADO,
         IS_FECHA,
         IS_INTENTOSFALLIDOS); 
 
 COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPU_ACTUALIZAR_BLOQUEO(
IS_USUARIO IN VARCHAR2,
IS_ESTADO IN VARCHAR2,
IS_FECHA IN TIMESTAMP,
IS_INTENTOSFALLIDOS IN NUMBER,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2

)
IS
BEGIN
                
 UPDATE TP_BLOQUEO SET 
 ESTADO =IS_ESTADO,
 FECHA_ACTUALIZACION =IS_FECHA,
 INTENTOS_FALLIDOS = IS_INTENTOSFALLIDOS
 WHERE USUARIO= IS_USUARIO ; 
 COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;

PROCEDURE SPS_CONSULTAR_BLOQUEO(
IS_USUARIO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   OPEN V_CURSOR FOR
   SELECT USUARIO,
   MNEMONICO_EMPRESA,
   ESTADO,
   NVL(TO_CHAR(FECHA_ACTUALIZACION,'YYYY-MM-DD HH24:MI:SS'),' ') AS FECHA_ACTUALIZACION,
   INTENTOS_FALLIDOS
   FROM TP_BLOQUEO WHERE USUARIO= IS_USUARIO ;             
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


/*
==========================
STORE PROCEDURE CLAVEANTIGUA
===========================*/

PROCEDURE SPS_CONSULTAR_CLAVEANTIGUA(
IS_USUARIO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   OPEN V_CURSOR FOR
   SELECT usuario,mnemonico_empresa,old_passwords FROM TP_CLAVE_ANTIGUA WHERE USUARIO= IS_USUARIO ;             
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPI_REGISTRAR_CLAVEANTIGUA(
IS_USUARIO IN VARCHAR2,
IS_EMPRESA IN VARCHAR2,
IS_PASSWORDS IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2

)
IS
BEGIN
                
 INSERT INTO TP_CLAVE_ANTIGUA  (
         USUARIO,
         MNEMONICO_EMPRESA, 
         OLD_PASSWORDS )
         VALUES(
         IS_USUARIO,
         IS_EMPRESA,
         IS_PASSWORDS); 
 
 COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Clave antigua registrada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPU_ACTUALIZAR_CLAVEANTIGUA(
PASSWORDS IN VARCHAR2,
IS_USUARIO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2

)
IS
BEGIN
                
 UPDATE TP_CLAVE_ANTIGUA SET 
        OLD_PASSWORDS = PASSWORDS
        WHERE USUARIO=IS_USUARIO; 
 
 COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Clave antigua actualizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


/*
==========================
STORE PROCEDURE DE LLAVE
===========================*/

PROCEDURE SPI_REGISTRAR_LLAVE(
IS_NOMBRE IN VARCHAR2,
IS_VALOR_NUEVO IN VARCHAR2,
IS_TIPO_LLAVE IN VARCHAR2,
IS_TIPO_GENERACION IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_AUD_USUARIO_CREACION IN VARCHAR2,
IS_AUD_FECHA_CREACION IN TIMESTAMP,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

)
IS

BEGIN

 INSERT INTO TP_LLAVE(
                ID_LLAVE,
                NOMBRE,
                VALOR_ANTERIOR,
                VALOR_NUEVO,
                TIPO_LLAVE,
                TIPO_GENERACION,
                ESTADO,
                AUD_USU_CREAC,
                AUD_FEC_CREAC
                )
            VALUES(
                SEQ_LLAVE.NEXTVAL,
                IS_NOMBRE,
                IS_VALOR_NUEVO,
                IS_VALOR_NUEVO,
                IS_TIPO_LLAVE,
                IS_TIPO_GENERACION,
                IS_ESTADO,
                IS_AUD_USUARIO_CREACION,
                IS_AUD_FECHA_CREACION);
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Llave registrada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;

PROCEDURE SPU_ACTUALIZAR_LLAVE(
IS_ID_LLAVE IN NUMBER,
IS_NOMBRE IN VARCHAR2,
IS_VALOR_NUEVO IN VARCHAR2,
IS_TIPO_LLAVE IN VARCHAR2,
IS_TIPO_GENERACION IN VARCHAR2,
IS_ESTADO IN VARCHAR,
IS_AUD_USUARIO_MODIFICACION IN VARCHAR2,
IS_AUD_FECHA_MODIFICACION IN TIMESTAMP,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

)
IS
V_VALOR_ANTERIOR TP_LLAVE.VALOR_ANTERIOR%TYPE;
BEGIN

    SELECT VALOR_NUEVO INTO V_VALOR_ANTERIOR
      FROM TP_LLAVE
        WHERE ID_LLAVE= IS_ID_LLAVE;    

    UPDATE TP_LLAVE SET
                NOMBRE = IS_NOMBRE,
                VALOR_ANTERIOR = V_VALOR_ANTERIOR,
                VALOR_NUEVO = IS_VALOR_NUEVO,
                TIPO_LLAVE = IS_TIPO_LLAVE,
                TIPO_GENERACION = IS_TIPO_GENERACION,
                ESTADO = IS_ESTADO,
                AUD_USU_MODIF = IS_AUD_USUARIO_MODIFICACION,
                AUD_FEC_MODIF = IS_AUD_FECHA_MODIFICACION
                WHERE ID_LLAVE= IS_ID_LLAVE;
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Llave actualizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;

PROCEDURE SPD_ELIMINAR_LLAVE(
IS_ID_LLAVE IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
)
IS

BEGIN

 DELETE TP_LLAVE WHERE ID_LLAVE= IS_ID_LLAVE;
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Llave eliminada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;

PROCEDURE SPS_CONSULTAR_LLAVE_SEGUN_TIPO(
IS_TIPO_LLAVE IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;
BEGIN  
  
   OPEN V_CURSOR FOR
   
   SELECT  
	  ID_LLAVE,
	  NOMBRE,
	  VALOR_ANTERIOR,
	  VALOR_NUEVO,
	  TIPO_LLAVE,
	  TIPO_GENERACION,
	  ESTADO	     
   FROM TP_LLAVE 
   WHERE TIPO_LLAVE= IS_TIPO_LLAVE;   
   
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta Llave realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;


/*
==========================
STORE PROCEDURE HOARIO
===========================*/
PROCEDURE SPS_CONSULTAR_HORARIO(
IS_HORARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR)
IS
V_CURSOR T_CURSOR;

BEGIN
                
   OPEN V_CURSOR FOR 
   SELECT * FROM TP_HORARIO H
   WHERE H.ID_HORARIO = IS_HORARIO;
   OS_CURSOR := V_CURSOR;
   
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;




PROCEDURE SPS_CONSULTAR_HORARIO_EMPRESA(
IS_EMPRESA IN NUMBER,
IS_CODIGO_HORARIO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR               OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;
BEGIN
   
   OPEN V_CURSOR FOR
   SELECT h.ID_EMPRESA,
    h.MNEMONICO,
    h.MAC as MAC,
    h.TIPO,
    d.ID_HORARIO,
    ID_DETALLE,
    POR_HORA,
    HORA_INICIO,
    HORA_FIN,
    POR_DIA,
    LUNES,
    MARTES,
    MIERCOLES,
    JUEVES,
    VIERNES,
    SABADO,
    DOMINGO
    FROM TP_HORARIO h, TS_HORARIO_DETALLE d
    WHERE h.ID_HORARIO=d.ID_HORARIO
    AND h.ID_EMPRESA=IS_EMPRESA 
    AND h.MNEMONICO=IS_CODIGO_HORARIO;
   OS_CURSOR :=V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta Llave realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;


PROCEDURE SPS_CONSULTAR_HORARIO_TODAS(
IS_NOMBRE IN VARCHAR2,
IS_TIPO IN VARCHAR2,
IS_EMPRESA IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;
T_CONCATENAR_WHERE VARCHAR2(500);

BEGIN
   IF IS_NOMBRE IS NOT NULL THEN
     T_CONCATENAR_WHERE := 'AND UPPER(H.NOMBRE) LIKE UPPER(''%'||IS_NOMBRE||'%'')';
   END IF;
   
   IF IS_TIPO IS NOT NULL THEN
     T_CONCATENAR_WHERE := T_CONCATENAR_WHERE||' AND H.TIPO = '''||IS_TIPO||'''';
   END IF;
   
   IF IS_EMPRESA IS NOT NULL THEN
     T_CONCATENAR_WHERE := T_CONCATENAR_WHERE||' AND H.ID_EMPRESA = '''||IS_EMPRESA||'''';
   END IF;
         
   T_QUERY := ' SELECT H.ID_HORARIO, H.MNEMONICO ,H.NOMBRE, H.TIPO, E.NOMBRE AS NOMB_EMPRESA
                FROM TP_HORARIO H JOIN TP_EMPRESA E 
                ON E.ID_EMPRESA = H.ID_EMPRESA WHERE 1= 1 '||T_CONCATENAR_WHERE; 
                
   
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := T_QUERY;--'Consulta realizada correctamente.';
   
   OPEN V_CURSOR FOR T_QUERY;
   OS_CURSOR := V_CURSOR;

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPI_REGISTRAR_HORARIO(
IS_ID_APLICACION  IN NUMBER,
IS_ID_EMPRESA     IN NUMBER,
IS_ID_USUARIO     IN NUMBER,
IS_TIPO       IN VARCHAR2,
IS_MNEMONICO     IN VARCHAR2,
IS_NOMBRE       IN VARCHAR2,
IS_MAC         IN VARCHAR2,
IS_USUARIO      IN VARCHAR2,
OS_ID_HORARIO       OUT NUMBER,
OS_COD_RETORNO      OUT VARCHAR2,
OS_MEN_RETORNO      OUT VARCHAR2
)
IS 
NUMBER_HORARIO NUMBER;

BEGIN
  IF IS_TIPO = 'APLICACION' THEN
    SELECT COUNT(*) INTO NUMBER_HORARIO 
      FROM TP_HORARIO 
      WHERE ID_APLICACION=IS_ID_APLICACION
      AND ID_EMPRESA = IS_ID_EMPRESA;  
  ELSIF IS_TIPO = 'USUARIO' THEN
    SELECT COUNT(*) INTO NUMBER_HORARIO 
      FROM TP_HORARIO 
      WHERE ID_USUARIO=IS_ID_USUARIO
      AND ID_EMPRESA = IS_ID_EMPRESA;
  END IF;
   
   IF NUMBER_HORARIO = 0 THEN
       INSERT INTO TP_HORARIO
        (ID_HORARIO, ID_APLICACION, ID_EMPRESA, ID_USUARIO,TIPO, MNEMONICO, NOMBRE,MAC,AUD_FEC_CREAC,AUD_USU_CREAC) 
        VALUES
        (SEQ_HORARIO.NEXTVAL ,IS_ID_APLICACION,IS_ID_EMPRESA,IS_ID_USUARIO,IS_TIPO,IS_MNEMONICO,IS_NOMBRE,IS_MAC, SYSDATE, IS_USUARIO)
        RETURNING ID_HORARIO INTO OS_ID_HORARIO;
       
        COMMIT;
         OS_COD_RETORNO := '00';
         OS_MEN_RETORNO := 'Horario registrado correctamente.';
   
    ELSE
      OS_COD_RETORNO := '10';
      OS_MEN_RETORNO := 'El Horario ya se encuentra registrado.';
      
    END IF;  
    

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;  
END;

PROCEDURE SPI_REGISTRAR_HORARIO_DET(
IS_ID_HORARIO IN NUMBER,
IS_DOMINGO IN NUMBER,
IS_HORA_FIN IN VARCHAR2,
IS_HORA_INICIO IN VARCHAR,
IS_JUEVES IN NUMBER,
IS_LUNES IN NUMBER,
IS_MARTES IN NUMBER,
IS_MIERCOLES IN NUMBER,
IS_POR_DIA IN NUMBER,
IS_POR_HORA IN NUMBER,
IS_SABADO IN NUMBER,
IS_VIERNES IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
)
IS 

BEGIN  
    INSERT INTO TS_HORARIO_DETALLE
    (ID_HORARIO, ID_DETALLE , DOMINGO, HORA_FIN , HORA_INICIO, JUEVES, LUNES, 
     MARTES, MIERCOLES, POR_DIA, POR_HORA, SABADO, VIERNES) 
    VALUES
    (IS_ID_HORARIO, SEQ_HORARIODETALLE.NEXTVAL ,IS_DOMINGO,IS_HORA_FIN,IS_HORA_INICIO,
     IS_JUEVES,IS_LUNES,IS_MARTES,IS_MIERCOLES,IS_POR_DIA,IS_POR_HORA,IS_SABADO,IS_VIERNES);

  COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Detalle de horario registrado correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;  
END;


PROCEDURE SPU_ACTUALIZAR_HORARIO(
IS_ID_APLICACION NUMBER,
IS_ID_EMPRESA    NUMBER,
IS_ID_USUARIO    IN VARCHAR2,
IS_TIPO      IN VARCHAR2,
IS_MNEMONICO    IN VARCHAR2,
IS_NOMBRE      IN VARCHAR2,
IS_MAC        IN VARCHAR2,
IS_USUARIO       IN VARCHAR2,
IS_ID_HORARIO    IN NUMBER,
OS_COD_RETORNO   OUT VARCHAR2,
OS_MEN_RETORNO   OUT VARCHAR2
)

IS 
BEGIN
        UPDATE TP_HORARIO SET 
        ID_APLICACION = IS_ID_APLICACION,
        ID_EMPRESA = IS_ID_EMPRESA,
        ID_USUARIO = IS_ID_USUARIO,
        TIPO = IS_TIPO,
        MNEMONICO = IS_MNEMONICO,
        NOMBRE = IS_NOMBRE,
        MAC = IS_MAC,
    AUD_FEC_MODIF = SYSDATE,
    AUD_USU_MODIF = IS_USUARIO 
        WHERE ID_HORARIO=IS_ID_HORARIO;        

  COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Registro actualizado correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;  
END;

PROCEDURE SPU_ACTUALIZAR_HORARIO_DET(
IS_ID_HORARIO IN NUMBER,
IS_ID_DETALLE IN NUMBER,
IS_DOMINGO IN NUMBER,
IS_HORA_FIN IN VARCHAR2,
IS_HORA_INICIO IN VARCHAR,
IS_JUEVES IN NUMBER,
IS_LUNES IN NUMBER,
IS_MARTES IN NUMBER,
IS_MIERCOLES IN NUMBER,
IS_POR_DIA IN NUMBER,
IS_POR_HORA IN NUMBER,
IS_SABADO IN NUMBER,
IS_VIERNES IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2
)

IS 
BEGIN
         UPDATE TS_HORARIO_DETALLE SET 
         DOMINGO = IS_DOMINGO,
         HORA_FIN = IS_HORA_FIN, 
         HORA_INICIO = IS_HORA_INICIO, 
         JUEVES = IS_JUEVES, 
         LUNES = IS_LUNES, 
         MARTES = IS_MARTES,  
         MIERCOLES = IS_MIERCOLES, 
         POR_DIA = IS_POR_DIA , 
         POR_HORA = IS_POR_HORA, 
         SABADO = IS_SABADO, 
         VIERNES  = IS_VIERNES  
         WHERE ID_HORARIO=IS_ID_HORARIO
         AND ID_DETALLE = IS_ID_DETALLE;   

  COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Registro actualizado correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;  
END;


PROCEDURE SPD_ELIMINAR_HORARIO(
IS_ID_HORARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2)
IS
BEGIN 
  
DELETE FROM TP_HORARIO WHERE ID_HORARIO = IS_ID_HORARIO;
SPD_ELIMINAR_HORARIO_DET(IS_ID_HORARIO, OS_COD_RETORNO, OS_MEN_RETORNO);

IF OS_COD_RETORNO = '00' THEN   
  COMMIT;
ELSE
  ROLLBACK;
END IF; 
  
 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;  
END;


PROCEDURE SPD_ELIMINAR_HORARIO_DET(
IS_ID_HORARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2)
IS
BEGIN 
  
DELETE FROM TS_HORARIO_DETALLE WHERE ID_HORARIO = IS_ID_HORARIO;
        
COMMIT;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Registro eliminado correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;  
END;


PROCEDURE SPS_OBTENER_CODIGO_HORARIO(
IS_TIPO IN VARCHAR2,
IS_ID_DATA IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR)

IS
V_CURSOR T_CURSOR;   
BEGIN
  IF IS_TIPO = 'USUARIO' THEN
     OPEN V_CURSOR FOR 
     SELECT  USUARIO AS MNEMONICO, NOMBRE  FROM TP_USUARIO
     WHERE ID_USUARIO = IS_ID_DATA; 
   ELSE 
     OPEN V_CURSOR FOR 
     SELECT  MNEMONICO AS MNEMONICO, NOMBRE  FROM TP_APLICACION
     WHERE ID_APLICACION = IS_ID_DATA;
     
   END IF;
  
  OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';
  
 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM; 
  
END;


PROCEDURE SPS_CONSULTAR_HORARIO_DET(
IS_HORARIO IN NUMBER,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR)
IS
V_CURSOR T_CURSOR;

BEGIN
                
   OPEN V_CURSOR FOR 
   SELECT * FROM TS_HORARIO_DETALLE HD
   WHERE HD.ID_HORARIO = IS_HORARIO;
   
   OS_CURSOR := V_CURSOR;
   
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_USUARIO_ADAPTER(
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
V_CURSOR T_CURSOR;

BEGIN
   
   OPEN V_CURSOR FOR
   SELECT ID_USUARIO AS CODIGO, USUARIO AS NOMBRE
   FROM TP_USUARIO;
   
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;


PROCEDURE SPS_CONSULTAR_USUARIOS_EMP(
  IS_ID_EMPRESA           IN VARCHAR2,
  OS_COD_RETORNO          OUT VARCHAR2,
  OS_MEN_RETORNO          OUT VARCHAR2,
  OS_CURSOR               OUT T_CURSOR
)
IS
BEGIN
  OPEN OS_CURSOR FOR 
  SELECT ID_USUARIO AS CODIGO, USUARIO AS NOMBRE from TP_USUARIO 
  WHERE ID_EMPRESA = IS_ID_EMPRESA ;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Empresa registrada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
  
END;

/*
==========================
STORE PROCEDURE DE IMPORTAR
===========================*/
PROCEDURE SPI_IMPORTAR_TEMPLATE(
  IS_MNEMONICO    IN VARCHAR2,
  IS_NOMBRE       IN VARCHAR2,
  IS_ESTADO       IN VARCHAR2,
  IS_TIPO         IN VARCHAR2,
  IS_DESCRIPCION  IN VARCHAR2,
  IS_ID_EMPRESA   IN VARCHAR2,
  IS_ID_APLICACION IN VARCHAR2,
  IS_USUARIO      IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2,
  OS_ID_TEMPLATE  OUT NUMBER
) 
IS
  CONT  NUMBER;
BEGIN
  
  IF IS_TIPO = 'EMPRESA' THEN
    SELECT COUNT(1) INTO CONT FROM TP_TEMPLATE WHERE MNEMONICO = IS_MNEMONICO AND TIPO = IS_TIPO;
    INSERT_XML_EMP(IS_DESCRIPCION, IS_USUARIO, OS_COD_RETORNO, OS_MEN_RETORNO);
  END IF;
  
  IF IS_TIPO = 'APLICACION' THEN
    SELECT COUNT(1) INTO CONT FROM TP_TEMPLATE WHERE MNEMONICO = IS_MNEMONICO AND TIPO = IS_TIPO AND ID_EMPRESA = TO_NUMBER(IS_ID_EMPRESA);
    INSERT_XML_APP(IS_DESCRIPCION, IS_ID_EMPRESA, IS_USUARIO, '/APLICACION', OS_COD_RETORNO, OS_MEN_RETORNO);
  END IF;
  
  IF (CONT = 0) AND (TRIM(OS_COD_RETORNO) IS NOT NULL) THEN 
 
    INSERT INTO TP_TEMPLATE VALUES(SEQ_TEMPLATE.NEXTVAL, IS_MNEMONICO, IS_NOMBRE, IS_ESTADO, IS_TIPO, SYSDATE, NULL, IS_USUARIO, NULL, IS_DESCRIPCION, TO_NUMBER(IS_ID_EMPRESA))
    RETURNING ID_TEMPLATE INTO OS_ID_TEMPLATE;  
    
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Operacion realizada correctamente.';
    COMMIT;
  ELSE
    OS_COD_RETORNO := '10';
    OS_MEN_RETORNO := 'El template ya existe';
    ROLLBACK;
  END IF;

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;


PROCEDURE SPS_CONSULTAR_IMPORTAR(
IS_TIPO                IN VARCHAR2,
IS_ID_EMPRESA          IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
BEGIN
  
  IF IS_TIPO = '0' THEN
  
    T_QUERY := 'SELECT TE.ID_TEMPLATE, TE.MNEMONICO, EM.NOMBRE AS "EMPRESA", EM.ID_EMPRESA AS "ID_EMPRESA", TE.DESCRIPCION ' ||
               'FROM TP_TEMPLATE TE ' ||
               'INNER JOIN TP_EMPRESA EM ON TE.MNEMONICO = EM.MNEMONICO ' ||
               'WHERE TE.TIPO = ''EMPRESA'' ';
    IF IS_ID_EMPRESA <> '-1' THEN           
      T_QUERY := T_QUERY || ' AND EM.ID_EMPRESA = ' || TO_NUMBER(IS_ID_EMPRESA);
    END IF;
  END IF;
  
  IF IS_TIPO = '1' THEN
    T_QUERY := 'SELECT TE.ID_TEMPLATE, TE.MNEMONICO, EM.NOMBRE AS "EMPRESA", EM.ID_EMPRESA AS "ID_EMPRESA", TE.DESCRIPCION, ' ||
               'AP.ID_APLICACION, AP.NOMBRE AS "APLICACION" ' ||
               'FROM TP_TEMPLATE TE ' ||
               'INNER JOIN TP_APLICACION AP ON AP.MNEMONICO = TE.MNEMONICO ' ||
               'INNER JOIN TP_EMPRESA EM ON AP.ID_EMPRESA = EM.ID_EMPRESA ' ||
               'WHERE TE.TIPO = ''APLICACION'' ';
    IF IS_ID_EMPRESA <> '-1' THEN           
      T_QUERY := T_QUERY || ' AND EM.ID_EMPRESA = ' || TO_NUMBER(IS_ID_EMPRESA);
    END IF;
  END IF; 
  
  OPEN OS_CURSOR FOR T_QUERY;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
  
END;



PROCEDURE SPI_REGISTRAR_TEMPLATE(
  IS_MNEMONICO    IN VARCHAR2,
  IS_NOMBRE       IN VARCHAR2,
  IS_ESTADO       IN VARCHAR2,
  IS_TIPO         IN VARCHAR2,
  IS_DESCRIPCION  IN CLOB,
  IS_ID_EMPRESA   IN VARCHAR2,
  IS_ID_APLICACION IN VARCHAR2,
  IS_USUARIO      IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2,
  OS_ID_TEMPLATE  OUT NUMBER
) 
IS
  IS_MNEMO VARCHAR2(255);
  CONT  NUMBER;
BEGIN 
  
  IF IS_TIPO = 'EMPRESA' THEN
    SELECT MNEMONICO INTO IS_MNEMO FROM TP_EMPRESA WHERE ID_EMPRESA = TO_NUMBER(IS_ID_EMPRESA);
    SELECT COUNT(1) INTO CONT FROM TP_TEMPLATE WHERE MNEMONICO = IS_MNEMO AND TIPO = IS_TIPO;
  END IF;
  
  IF IS_TIPO = 'APLICACION' THEN
    SELECT MNEMONICO INTO IS_MNEMO FROM TP_APLICACION WHERE ID_APLICACION = TO_NUMBER(IS_ID_APLICACION);
    SELECT COUNT(1) INTO CONT FROM TP_TEMPLATE WHERE MNEMONICO = IS_MNEMO AND TIPO = IS_TIPO AND ID_EMPRESA = TO_NUMBER(IS_ID_EMPRESA);
  END IF;
  
  IF CONT = 0 THEN 
   
    INSERT INTO TP_TEMPLATE VALUES(SEQ_TEMPLATE.NEXTVAL, IS_MNEMO, IS_NOMBRE, IS_ESTADO, IS_TIPO, SYSDATE, NULL, IS_USUARIO, NULL, IS_DESCRIPCION, TO_NUMBER(IS_ID_EMPRESA))
    RETURNING ID_TEMPLATE INTO OS_ID_TEMPLATE;  
    
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Operacion realizada correctamente.';
  ELSE
    OS_COD_RETORNO := '10';
    OS_MEN_RETORNO := 'El template ya existe';
  END IF;

  COMMIT;

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;
END;

PROCEDURE SPS_CONSULTAR_PERMISO_ROL(
  IS_ID_ROL  IN VARCHAR2,
  OS_COD_RETORNO    OUT VARCHAR2,
  OS_MEN_RETORNO    OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
)
IS 
  T_QUERY VARCHAR2(250);
BEGIN
  
  T_QUERY := 'SELECT P.MNEMONICO, P.NOMBRE FROM TP_PERMISO P INNER JOIN TR_PERMISO_X_ROL PR ON PR.ID_PERMISO = P.ID_PERMISO ' || 
             'WHERE PR.ID_ROL =' || IS_ID_ROL;
  
  OPEN OS_CURSOR FOR T_QUERY;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;


END;



PROCEDURE SPS_CONSULTAR_ROL_X_APP(
  IS_ID_APLICACION  IN VARCHAR2,
  OS_COD_RETORNO    OUT VARCHAR2,
  OS_MEN_RETORNO    OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
)
IS 
  T_QUERY VARCHAR2(250);
BEGIN
  
  T_QUERY := 'SELECT R.ID_ROL, R.MNEMONICO, R.NOMBRE FROM TP_ROL R WHERE R.ID_APLICACION =' || IS_ID_APLICACION;
  
  OPEN OS_CURSOR FOR T_QUERY;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;


END;


PROCEDURE SPS_CONSULTAR_APP(
  IS_ID_APLICACION  IN VARCHAR2,
  OS_COD_RETORNO    OUT VARCHAR2,
  OS_MEN_RETORNO    OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
)
IS 
  T_QUERY VARCHAR2(250);
BEGIN
  
  T_QUERY := 'SELECT P.MNEMONICO, P.NOMBRE FROM TP_PERMISO P WHERE P.ID_APLICACION =' || IS_ID_APLICACION;
  
  OPEN OS_CURSOR FOR T_QUERY;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;


END;



PROCEDURE SPS_CONSULTAR_ROL_USUARIO(
  IS_ID_EMPRESA     IN VARCHAR2,
  IS_ID_USUARIO     IN VARCHAR2,
  OS_COD_RETORNO    OUT VARCHAR2,
  OS_MEN_RETORNO    OUT VARCHAR2,
  OS_CURSOR         OUT T_CURSOR
)
IS
  T_QUERY VARCHAR2(1000);
BEGIN

  T_QUERY := 'SELECT R.MNEMONICO, R.NOMBRE FROM TP_ROL R ' ||
             'INNER JOIN TR_ROL_X_USUARIO RU ON RU.ID_ROL = R.ID_ROL ' ||
             'INNER JOIN TP_USUARIO U ON RU.ID_USUARIO = U.ID_USUARIO ' ||
             'INNER JOIN TP_EMPRESA E ON U.ID_EMPRESA = E.ID_EMPRESA ' ||
             'WHERE E.ID_EMPRESA=' || IS_ID_EMPRESA  ||' AND U.ID_USUARIO =' || IS_ID_USUARIO;

  OPEN OS_CURSOR FOR T_QUERY;
  
  OS_COD_RETORNO := '00';
  OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;


END;



PROCEDURE SPU_ACTUALIZAR_USUARIO_ESTADO(
IS_ID_USUARIO IN NUMBER,
IS_ESTADO IN VARCHAR2,
IS_CONTRASENA IN VARCHAR2,
IS_FECHACAMBIOCLAVE IN TIMESTAMP,
IS_USUARIO_AGR     IN VARCHAR2,
OS_COD_RETORNO           OUT VARCHAR2,
OS_MEN_RETORNO           OUT VARCHAR2

)
IS

BEGIN

 UPDATE TP_USUARIO SET                
        ESTADO= IS_ESTADO,  
        CONTRASENA=IS_CONTRASENA,
        FECHA_CAMBIO_CLAVE = IS_FECHACAMBIOCLAVE,              

        AUD_FEC_MODIF = SYSDATE,
        AUD_USU_MODIF = IS_USUARIO_AGR 
        WHERE ID_USUARIO=IS_ID_USUARIO;             
    COMMIT;
    OS_COD_RETORNO := '00';
    OS_MEN_RETORNO := 'Estado Usuario actualizado correctamente.';


 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


PROCEDURE SPS_CONSULTAR_PERMISO_IMPORT(
IS_ID_APLICACION IN VARCHAR2,
IS_MNEMONICO IN VARCHAR2,
OS_COD_RETORNO         OUT VARCHAR2,
OS_MEN_RETORNO         OUT VARCHAR2,
OS_CURSOR              OUT T_CURSOR
)
IS
T_QUERY VARCHAR2(1000);
V_CURSOR T_CURSOR;
T_CONCAT_WHERE VARCHAR(300);

BEGIN

   IF IS_MNEMONICO IS NOT NULL THEN
      T_CONCAT_WHERE := ' AND P.MNEMONICO = '''|| IS_MNEMONICO||'''';
   END IF;
   
   IF IS_ID_APLICACION IS NOT NULL THEN
      T_CONCAT_WHERE := T_CONCAT_WHERE||' AND P.ID_APLICACION='||IS_ID_APLICACION;
   END IF;


   T_QUERY := 'SELECT P.ID_PERMISO,P.MNEMONICO,P.NOMBRE AS P_NOMBRE
				FROM TP_PERMISO P
				WHERE 1=1 '||T_CONCAT_WHERE;             
   OPEN V_CURSOR FOR T_QUERY;
   OS_CURSOR := V_CURSOR;
   OS_COD_RETORNO := '00';
   OS_MEN_RETORNO := 'Consulta realizada correctamente.';

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
      OS_COD_RETORNO := '01';
      OS_MEN_RETORNO := SQLCODE||'.'||SQLERRM;

END;


FUNCTION FUN_EMPRESA_X_APLICACION(IS_ID_APLICACION IN NUMBER) RETURN VARCHAR2
  IS
  OS_EMPRESA  VARCHAR2(150);
  BEGIN
    SELECT E.NOMBRE  INTO OS_EMPRESA
         FROM TP_EMPRESA E, TP_APLICACION A
         WHERE E.ID_EMPRESA = A.ID_APLICACION
         AND A.ID_APLICACION = IS_ID_APLICACION ; 
    
  RETURN  OS_EMPRESA;
 EXCEPTION
    WHEN OTHERS THEN
       RETURN ''; 
END ;

END PKG_SCA;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_XML_APP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCAPCIDE"."INSERT_XML_APP" (
  IS_DESCRIPCION IN CLOB,
  IS_ID_EMPRESA IN NUMBER,
  IS_USUARIO      IN VARCHAR2,
  IS_PATH         IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2
) AS 
  XML           XMLType;
  CONT          NUMBER;
  ID_APP        NUMBER;
  ID_PERMISO    NUMBER;
  ID_ROL        NUMBER;
BEGIN
    XML := XMLType(IS_DESCRIPCION);
    
    FOR AP IN (SELECT ExtractValue(column_value, '/APLICACION/@mnemonico') AS MNEMONICO, 
                     ExtractValue(column_value,'/APLICACION/@nombre') AS NOMBRE,
                     Extract(column_value,'/APLICACION/PERMISO') AS PERMISOS,
                     Extract(column_value,'/APLICACION/ROL') AS ROLS                                          
              FROM TABLE(XMLSequence(Extract(XML, IS_PATH))) p) LOOP
      
      IF (AP.MNEMONICO IS NOT NULL) AND (AP.NOMBRE IS NOT NULL) THEN  
      
        SELECT COUNT(1) INTO CONT FROM TP_APLICACION WHERE MNEMONICO = AP.MNEMONICO AND ID_EMPRESA = IS_ID_EMPRESA;
        
        IF CONT = 0 THEN 
        
          ID_APP := SEQ_APLICACION.NEXTVAL;        
          --INGRESO DE APLICACION
          INSERT INTO TP_APLICACION VALUES (IS_ID_EMPRESA, ID_APP, AP.MNEMONICO, AP.NOMBRE, 'HABILITADO', '', '0', SYSDATE, NULL, IS_USUARIO, NULL);
          --INGRESO DE POLITICAS
          INSERT INTO TS_ATRIBUTO_APLICACION SELECT AE.ID_POLITICA,AE.ID_ATRIBUTO, AP.MNEMONICO, AE.VALOR, IS_ID_EMPRESA  FROM TS_ATRIBUTO_EMPRESA AE 
                                             WHERE AE.EMPRESA = (SELECT MNEMONICO FROM TP_EMPRESA EMP WHERE EMP.ID_EMPRESA = IS_ID_EMPRESA);
         
                                              
          FOR P IN (SELECT ExtractValue(column_value, '/PERMISO/@mnemonico') AS MNEMONICO, 
                           ExtractValue(column_value, '/PERMISO/@nombre') AS NOMBRE
                    FROM TABLE(XMLSequence(AP.PERMISOS)) p) LOOP
            ID_PERMISO := SEQ_PERMISO.NEXTVAL;
            --INGRESO DE PERMISO
            INSERT INTO TP_PERMISO VALUES (ID_APP, ID_PERMISO, P.MNEMONICO, P.NOMBRE, 'HABILITADO', 'OPCION', '', SYSDATE, NULL, IS_USUARIO, NULL);
          END LOOP;
          
          FOR R IN (SELECT ExtractValue(column_value,'/ROL/@mnemonico') AS MNEMONICO, 
                           ExtractValue(column_value, '/ROL/@nombre') AS NOMBRE,
                           Extract(column_value, '/ROL/ROLPERMISO') AS ROLPERMISOS
                    FROM TABLE(XMLSequence(AP.ROLS)) p) LOOP
            ID_ROL := SEQ_ROL.NEXTVAL;
            --INGRESO DE ROLES
            INSERT INTO TP_ROL VALUES (ID_APP, ID_ROL, R.MNEMONICO, R.NOMBRE, 'HABILITADO', '', SYSDATE, NULL, IS_USUARIO, NULL);
            
            FOR RP IN (SELECT ExtractValue(column_value, '/ROLPERMISO/@mnemonico') AS MNEMONICO, 
                              ExtractValue(column_value, '/ROLPERMISO/@nombre') AS NOMBRE
                       FROM TABLE(XMLSequence(R.ROLPERMISOS)) p) LOOP
              --INGRESO DE PERMISO POR ROLES
              INSERT INTO TR_PERMISO_X_ROL VALUES (ID_ROL, (SELECT ID_PERMISO FROM TP_PERMISO PE WHERE PE.MNEMONICO = RP.MNEMONICO AND PE.ID_APLICACION = ID_APP));
            END LOOP;
            
          END LOOP;
         ELSE 
           OS_COD_RETORNO := '25';
           OS_MEN_RETORNO := 'La aplicación ya existe';
        END IF;
      END IF;
    END LOOP;
      
END INSERT_XML_APP;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_XML_EMP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCAPCIDE"."INSERT_XML_EMP" (
  IS_DESCRIPCION IN CLOB,
  IS_USUARIO     IN VARCHAR2,
  OS_COD_RETORNO  OUT VARCHAR2,
  OS_MEN_RETORNO  OUT VARCHAR2
) AS 
  XML XMLType;
  EMPRESA NUMBER;
  ID_USUARIO NUMBER;
  CONT       NUMBER;
  
BEGIN
    XML := XMLType(IS_DESCRIPCION);
    
    FOR R IN (SELECT ExtractValue(column_value, '/EMPRESA/@mnemonico') AS MNEMONICO, 
             ExtractValue(column_value, '/EMPRESA/@nombre') AS NOMBRE,
             Extract(column_value,'/EMPRESA/USUARIO') AS USUARIOS
             FROM TABLE(XMLSequence(XML)) p) LOOP
      IF (R.MNEMONICO IS NOT NULL) AND (R.NOMBRE IS NOT NULL) THEN  
        
        EMPRESA := SEQ_EMPRESA.NEXTVAL;
        
        SELECT COUNT(1) INTO CONT FROM TP_EMPRESA WHERE MNEMONICO = R.MNEMONICO;
        
        IF CONT = 0 THEN 
        
          INSERT INTO TP_EMPRESA VALUES (EMPRESA, R.MNEMONICO, R.NOMBRE, 'HABILITADO', '', SYSDATE, NULL, IS_USUARIO, NULL);
          --INGRESO DE POLITICAS
          INSERT INTO TS_ATRIBUTO_EMPRESA SELECT AE.ID_POLITICA,AE.ID_ATRIBUTO, R.MNEMONICO, AE.VALOR 
                                          FROM TS_ATRIBUTO_EMPRESA AE WHERE AE.EMPRESA = 'novatronic' ;
          
          INSERT_XML_APP(IS_DESCRIPCION, EMPRESA, IS_USUARIO, '/EMPRESA/APLICACION', OS_COD_RETORNO, OS_MEN_RETORNO);
          
          FOR U IN (SELECT ExtractValue(column_value, '/USUARIO/@usuario') AS USUARIO, 
                           ExtractValue(column_value, '/USUARIO/@nombre') AS NOMBRE,
                           Extract(column_value, '/USUARIO/USUARIOROL') AS USUARIOROLES
                    FROM TABLE(XMLSequence(R.USUARIOS)) p) LOOP
                    
            ID_USUARIO := SEQ_USUARIO.NEXTVAL;
            --INGRESO DE USUARIO
            INSERT INTO TP_USUARIO(ID_EMPRESA, ID_USUARIO, USUARIO,NOMBRE,  CONTRASENA,
                                   ESTADO, FECHA_CAMBIO_CLAVE, FECHA_LOGIN, MAC, AUD_FEC_CREAC, AUD_USU_CREAC ) 
            VALUES (EMPRESA, ID_USUARIO, U.USUARIO, U.NOMBRE, '12345','HABILITADO', SYSDATE, SYSDATE, '@@@@', SYSDATE, IS_USUARIO);
            
            FOR RP IN (SELECT ExtractValue(column_value, '/USUARIOROL/@mnemonico') AS MNEMONICO, 
                                ExtractValue(column_value, '/USUARIOROL/@nombre') AS NOMBRE
                       FROM TABLE(XMLSequence(U.USUARIOROLES)) p) LOOP
              --INGRESO DE ROL POR USUARIO
              INSERT INTO TR_ROL_X_USUARIO VALUES (ID_USUARIO, (SELECT ID_ROL FROM TP_ROL R 
                                                    INNER JOIN TP_APLICACION AP ON R.ID_APLICACION = AP.ID_APLICACION
                                                    INNER JOIN TP_EMPRESA EM ON AP.ID_EMPRESA = EM.ID_EMPRESA 
                                                    WHERE R.MNEMONICO = RP.MNEMONICO AND EM.ID_EMPRESA = EMPRESA));
            
            END LOOP;
            
          END LOOP;
        
        ELSE 
           OS_COD_RETORNO := '15';
           OS_MEN_RETORNO := 'La empresa ya existe';
        END IF;
      END IF;
    END LOOP;
    
END INSERT_XML_EMP;

/
